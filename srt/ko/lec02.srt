1
00:00:00,000 --> 00:00:02,000
이 방정식을 두 번 곱해보세요, 알겠죠?

2
00:00:12,000 --> 00:00:17,000
이게 바로 그거예요. 선형대수학의 두 번째 강의입니다.

3
00:00:17,000 --> 00:00:25,000
오늘 다룰 주요 주제를 아래에 적어놨어요.

4
00:00:25,000 --> 00:00:35,000
저기 예제로 사용할 방정식 시스템을 적어놨습니다. 그럼 이걸로 뭘 할 건가요?

5
00:00:35,000 --> 00:00:41,000
우리는 이걸 풀 거예요. 하지만 행렬식(determinant)은 사용하지 않을 겁니다.

6
00:00:41,000 --> 00:00:47,000
행렬식은 나중에 다룰 거예요. 우리가 사용할 방법은 소거법이에요.

7
00:00:47,000 --> 00:00:53,000
소거법은 모든 소프트웨어 패키지가 방정식을 풀 때 사용하는 방법이죠.

8
00:00:53,000 --> 00:01:03,000
소거법은 성공하면 답을 얻을 수 있어요.

9
00:01:03,000 --> 00:01:09,000
그리고 보통은 성공하죠. 그 시스템에 들어가는 행렬 A가

10
00:01:09,000 --> 00:01:18,000
좋은 행렬이라면, 이 경우에는 그렇다고 생각해요, 소거법이 효과적으로 작동할 거예요.

11
00:01:18,000 --> 00:01:25,000
그런데 소거법이 어떻게 작동하는지 보는데, 실패할 수도 있는 경우를 물어보는 게 좋겠죠?

12
00:01:25,000 --> 00:01:32,000
그래서 동시에 소거법이 행렬이 좋은지 문제가 있는지 어떻게 판단하는지도 볼게요.

13
00:01:32,000 --> 00:01:40,000
그리고 답을 완성하려면, 당연히 역대입이라는 단계가 필요해요.

14
00:01:40,000 --> 00:01:47,000
사실 소거법의 아이디어는 여러분도 생각했을 거예요, 그렇죠?

15
00:01:47,000 --> 00:01:54,000
가우스가 우리보다 먼저 생각했지만, 그건 단지 그가 더 일찍 태어났기 때문이에요.

16
00:01:54,000 --> 00:02:00,000
자연스러운 아이디어죠… 그리고 더 일찍 죽기도 했고요.

17
00:02:00,000 --> 00:02:07,000
알겠어요, 여러분도 그 아이디어를 봤을 거예요.

18
00:02:07,000 --> 00:02:16,000
이제 제가 보여드리고 싶은 건 소거법을 행렬 언어로 표현하는 거예요. 왜냐하면 이 강의 전체가

19
00:02:16,000 --> 00:02:21,000
모든 핵심 아이디어가 행렬 연산으로 표현되거든요, 단어가 아니라.

20
00:02:21,000 --> 00:02:27,000
그리고 우리가 만날 연산 중 하나는 당연히 행렬을 어떻게 곱하고 왜 그러는지예요.

21
00:02:27,000 --> 00:02:34,000
자, 여기 방정식 시스템이 있어요.

22
00:02:34,000 --> 00:02:42,000
세 개의 방정식과 세 개의 미지수. 그리고 여기 3x3 행렬이 있어요.

23
00:02:42,000 --> 00:02:47,000
이게 우리가 풀어야 할 시스템이에요, Ax = b.

24
00:02:47,000 --> 00:02:55,000
이게 풀어야 할 시스템이고, 우변은 벡터 2, 12, 2예요.

25
00:02:55,000 --> 00:03:00,000
이제 소거법을 설명할 때,

26
00:03:00,000 --> 00:03:06,000
등호와 더하기 기호를 계속 쓰는 건 귀찮아요.

27
00:03:06,000 --> 00:03:12,000
그 행렬이 정말 중요한 거예요. 모든 게 그 행렬 안에 있어요.

28
00:03:12,000 --> 00:03:17,000
하지만 그 뒤에는 방정식이 있죠. 그럼 소거법이 뭘 하나요?

29
00:03:17,000 --> 00:03:22,000
소거법의 첫 번째 단계는 뭘까요?

30
00:03:22,000 --> 00:03:29,000
첫 번째 방정식은 괜찮다고 받아들이고, 그 방정식에 적절한 수를 곱해서

31
00:03:29,000 --> 00:03:36,000
두 번째 방정식에서 빼줄 거예요.

32
00:03:36,000 --> 00:03:41,000
무슨 목적으로요? 그게 곱해야 할 수를 결정해줄 거예요.

33
00:03:41,000 --> 00:03:50,000
목적은 두 번째 방정식에서 x 부분을 없애는 거예요.

34
00:03:50,000 --> 00:03:57,000
그래서 x를 소거하려는 거죠. 그럼 뭘 곱해야 할까요?

35
00:03:57,000 --> 00:04:03,000
다시 행렬로 해볼게요, 짧게 할 수 있으니까. 여기서 곱해야 할 수는 뭘까요?

36
00:04:03,000 --> 00:04:08,000
첫 번째 방정식에 뭘 곱해서 빼야 할까요? 제가 "빼기"라는 단어를 쓴다는 걸 주목하세요.

37
00:04:08,000 --> 00:04:13,000
그 관례를 지키고 싶어요. 빼기를 할게요.

38
00:04:13,000 --> 00:04:19,000
우선 여기 시작하는 핵심 숫자가 있어요.

39
00:04:19,000 --> 00:04:25,000
그걸 피벗이라고 불러요. 상자에 넣고 이름을 적어둘게요.

40
00:04:25,000 --> 00:04:30,000
이게 첫 번째 피벗이에요. 첫 번째 피벗.

41
00:04:30,000 --> 00:04:35,000
좋아요. 이건 그 방정식의 핵심 숫자 같은 거예요.

42
00:04:35,000 --> 00:04:45,000
이제 곱해야 할 수는 뭘까요? 첫 번째 행은 안 바뀌고, 그게 피벗 행이에요.

43
00:04:45,000 --> 00:04:51,000
그걸 사용할 건데, 이제 여러분께 곱해야 할 수가 뭔지 물어볼게요.

44
00:04:51,000 --> 00:04:58,000
네? 첫 번째 방정식에 3을 곱하면 저 3을 없앨 수 있어요.

45
00:04:58,000 --> 00:05:05,000
좋아요. 그럼 뭐가 남을까요? 곱해야 할 수가 3이에요. 3을 곱하면 저게 0이 돼요.

46
00:05:05,000 --> 00:05:11,000
그게 우리의 목적이었죠. 3개의 2를 8에서 빼면 2가 남고, 3개의 1을 1에서 빼면 -2가 남아요.

47
00:05:11,000 --> 00:05:17,000
이건 안 바뀌었어요.

48
00:05:17,000 --> 00:05:23,000
이제 다음 단계는—이건 전방 소거법이고, 그 단계가 끝났어요.

49
00:05:23,000 --> 00:05:32,000
아, 잠깐만요, 우변은 어떻게 되나요? 우변도 함께 따라가야죠.

50
00:05:32,000 --> 00:05:38,000
사실 MatLab은 왼쪽을 먼저 끝내고 나서 우변을 처리해요.

51
00:05:38,000 --> 00:05:44,000
제가 잠시 MatLab인 척하고 그렇게 해볼게요. 알겠죠.

52
00:05:44,000 --> 00:05:51,000
b 열, 우변을 위한 공간을 남겨놓고 나중에 채울게요.

53
00:05:51,000 --> 00:05:56,000
좋아요. 이제 소거법의 다음 단계는 뭘까요?

54
00:05:56,000 --> 00:06:05,000
제가 정리한 이 위치는 2,1 위치였어요,

55
00:06:05,000 --> 00:06:10,000
2행 1열. 그래서 2,1 위치에 0을 만들었죠.

56
00:06:10,000 --> 00:06:17,000
2,1을 그 단계의 인덱스로 사용할게요. 다음 단계는 열을 끝내려고

57
00:06:17,000 --> 00:06:24,000
저 위치에 0을 만드는 거예요. 그래서 다음 단계는 정말 3,1 단계, 3행 1열이에요.

58
00:06:24,000 --> 00:06:30,000
그런데 이미 0이네요.

59
00:06:30,000 --> 00:06:39,000
좋아요. 그럼 곱해야 할 수가 0이에요. 이 방정식의 0을 곱해서 빼면 끝이에요.

60
00:06:39,000 --> 00:06:48,000
그걸 반복하지는 않을게요. 하지만 거기 단계가 있었고, MatLab은 이 숫자를 보고

61
00:06:48,000 --> 00:06:53,000
그 단계를 수행했을 거예요, 미리 0이라고 말하지 않았다면요.

62
00:06:53,000 --> 00:07:00,000
좋아요. 이제 뭐죠? 이제 두 번째 피벗을 볼 수 있어요. 그게 뭘까요?

63
00:07:00,000 --> 00:07:06,000
두 번째 피벗—보세요, 이제 이 방정식에서 x가 없어졌죠?

64
00:07:06,000 --> 00:07:12,000
이제 y와 z만 남은 두 개의 방정식이 됐어요.

65
00:07:12,000 --> 00:07:20,000
이제 다시 하면 돼요. 이건 정말 기본적인 알고리즘이고 여러분도 봤을 거예요,

66
00:07:20,000 --> 00:07:25,000
마지막 단계를 함께 해볼게요.

67
00:07:25,000 --> 00:07:32,000
여전히 첫 번째 피벗이에요. 이제 두 번째 피벗은 여기 나타난 이 숫자예요.

68
00:07:32,000 --> 00:07:38,000
그럼 적절한 곱해야 할 수는 뭘까요? 목적이 뭐죠?

69
00:07:38,000 --> 00:07:44,000
3,2 위치를 없애는 거죠, 맞죠?

70
00:07:44,000 --> 00:07:53,000
이건 2,1 단계였고, 이제 3,2 단계를 할 거예요.

71
00:07:53,000 --> 00:08:00,000
여기까지는 다 똑같아요, 1 2 1, 0 2 -1

72
00:08:00,000 --> 00:08:05,000
피벗이 여기 있어요. 이제 이 피벗을 사용해서, 곱해야 할 수가 뭘까요?

73
00:08:05,000 --> 00:08:10,000
이 행을 곱해서 이 행에서 빼면 저게 0이 돼요.

74
00:08:10,000 --> 00:08:20,000
그럼 0, 0이고, 5가 되나요?

75
00:08:20,000 --> 00:08:26,000
네, 5가 맞는 것 같아요. 여기 1이 있고, 이걸 두 번 빼니까요.

76
00:08:26,000 --> 00:08:32,000
여기 세 번째 피벗이 있어요. 세 개의 피벗에 모두 상자를 쳐놓겠습니다.

77
00:08:32,000 --> 00:08:41,000
혹시 제가 -1을 잘못 만든 건가요?

78
00:08:48,000 --> 00:08:55,000
테이프로는 제가 바로잡는 것만큼 쉽게 고칠 수 없네요.

79
00:08:55,000 --> 00:09:00,000
고맙습니다. 이제 여러분은 이 강의에서 A를 받았어요.

80
00:09:00,000 --> 00:09:07,000
이제 맞나요? 좋아요. 세 개의 피벗이 여기 있어요—

81
00:09:07,000 --> 00:09:15,000
이 행렬에 대해 바로 많은 걸 알 수 있어요. 이 소거 단계는 A에서

82
00:09:15,000 --> 00:09:24,000
U로 가는 거예요. U는 상삼각행렬(upper triangular)을 뜻해요.

83
00:09:24,000 --> 00:09:29,000
소거법의 전체 목적은 A에서 U로 가는 거였어요.

84
00:09:29,000 --> 00:09:35,000
말 그대로, 이건 과학 계산에서 가장 흔한 계산이에요.

85
00:09:35,000 --> 00:09:44,000
사람들은 어떻게 더 빨리 할 수 있을지 생각하죠. 왜냐하면 정말 중요한 일이니까요.

86
00:09:44,000 --> 00:09:52,000
하지만 우리는 직관적인 방법으로 하고 있어요. 세 개의 피벗을 찾았고, 아, 그걸 말하지 않았어요.

87
00:09:52,000 --> 00:09:57,000
피벗은 0이 될 수 없어요. 0을 피벗으로 받아들이지 않아요.

88
00:09:57,000 --> 00:10:03,000
0이 나오지 않았어요. 이 행렬은 훌륭해요. 세 개의 피벗을 줬고,

89
00:10:03,000 --> 00:10:11,000
특별한 조치를 취할 필요 없이 규칙을 따랐더니 피벗이 1, 2, 5가 나왔어요.

90
00:10:11,000 --> 00:10:20,000
참고로, 나중에 나올 내용을 미리 말하자면, 이 행렬의 행렬식을 알고 싶다면

91
00:10:20,000 --> 00:10:25,000
—저는 절대 알고 싶지 않지만—피벗을 곱하면 돼요. 행렬식은 10이에요.

92
00:10:25,000 --> 00:10:32,000
행렬식 같은 것도 여기 있어요.

93
00:10:32,000 --> 00:10:38,000
좋아요. 이제 실패에 대해 잠깐 얘기하고,

94
00:10:38,000 --> 00:10:44,000
그다음에 다시 성공으로 돌아올게요.

95
00:10:44,000 --> 00:10:54,000
이게 어떻게 실패할 수 있을까요? 실패란 세 개의 피벗을 얻지 못하는 걸 의미해요.

96
00:10:54,000 --> 00:11:00,000
몇 가지 지점이 있어요.

97
00:11:00,000 --> 00:11:06,000
만약 여기 맨 처음 숫자가 0이었다면 이미 문제가 됐을 거예요.

98
00:11:06,000 --> 00:11:14,000
만약 거기가 0이었다면—그 방정식에 x가 없다고 가정해보세요—첫 번째 방정식에요.

99
00:11:14,000 --> 00:11:21,000
그럼 문제를 풀 수 없다는 뜻인가요? 포기해야 하나요? 아니요.

100
00:11:21,000 --> 00:11:30,000
뭘 하죠? 행을 바꿔요. 행을 교환하는 거예요.

101
00:11:30,000 --> 00:11:37,000
0이 나오는 경우에, "0 피벗"이라고 말하지 않을 거예요.

102
00:11:37,000 --> 00:11:45,000
절대 그런 말 안 할게요. 하지만 피벗 위치에 0이 있으면,

103
00:11:45,000 --> 00:11:51,000
아래쪽 방정식과 교환해서 제대로 된 피벗을 위로 올리려고 할게요.

104
00:11:51,000 --> 00:11:56,000
좋아요. 예를 들어, 두 번째 피벗이 2로 나왔어요.

105
00:11:56,000 --> 00:12:01,000
0이 될 수도 있었을까요? 사실 이 8을 조금 바꾸면

106
00:12:01,000 --> 00:12:08,000
조금 문제가 됐을 거예요. 8을 뭘로 바꾸면 문제가 생길까요?

107
00:12:08,000 --> 00:12:14,000
6으로요. 만약 저게 6이었다면, 여기가 0이 됐을 거예요.

108
00:12:14,000 --> 00:12:20,000
그럼 그걸 피벗으로 사용할 수 없었죠. 하지만 또 교환할 수 있었을 거예요.

109
00:12:20,000 --> 00:12:26,000
이 경우에는요. 언제 문제를 해결할 수 있냐면요?

110
00:12:26,000 --> 00:12:32,000
이 문제 있는 0 아래에 0이 아닌 숫자가 있으면 해결할 수 있어요.

111
00:12:32,000 --> 00:12:40,000
여기에는 있었죠. 그래서 6이었다면 행 교환으로 살아남았을 거예요.

112
00:12:40,000 --> 00:12:46,000
물론 행 교환을 할 수 없는 경우도 있을 수 있지만, 여기서는 아니었어요.

113
00:12:46,000 --> 00:12:55,000
또 이 숫자 1이 조금 달랐다면 문제가 될 수도 있었어요.

114
00:12:55,000 --> 00:13:02,000
이 1이 마지막에 5가 됐죠, 아마도.

115
00:13:02,000 --> 00:13:08,000
여기서 어떤 숫자가 문제를 일으켰을지 보이시나요?

116
00:13:08,000 --> 00:13:14,000
정말 벗어날 수 없는 문제가 생기려면,

117
00:13:14,000 --> 00:13:22,000
피벗 위치에 0이 있고 교환할 곳이 없는 경우예요.

118
00:13:22,000 --> 00:13:31,000
그러니까 여기 있었으면 실패를 의미하는 어떤 숫자가 있어야 해요.

119
00:13:31,000 --> 00:13:39,000
-4, 좋아요. 만약 여기가 -4z였다면—일단 여기에 써놓겠습니다.

120
00:13:39,000 --> 00:13:47,000
만약 이게 -4였다면, 같은 단계를 거쳤을 거예요.

121
00:13:47,000 --> 00:13:53,000
여기가 -4였고, 여전히 -4였을 거예요.

122
00:13:53,000 --> 00:14:02,000
하지만 마지막에 0이 됐을 거고, 세 번째 피벗이 없었을 거예요.

123
00:14:02,000 --> 00:14:08,000
그 행렬은 역행렬이 존재하지 않았을 거예요. 물론 행렬의 역은 다음 주에 다룰 거지만,

124
00:14:08,000 --> 00:14:16,000
이런 단어를 들어본 적 있죠. 그래서 실패를 이렇게 알아내요.

125
00:14:16,000 --> 00:14:24,000
행 교환으로 벗어날 수 있는 일시적인 실패가 있거나, 0이 나오고 아래에 사용할 게 없는 완전한 실패가 있죠.

126
00:14:24,000 --> 00:14:29,000
좋아요. 이제 성공으로 돌아가죠.

127
00:14:29,000 --> 00:14:39,000
사실 다음 주제는 역대입이에요.

128
00:14:39,000 --> 00:14:46,000
역대입이 뭐냐면요? 이제 우변을 가져와야겠네요.

129
00:14:46,000 --> 00:14:52,000
MatLab은 뭘 하고, 우리는 뭘 해야 할까요?

130
00:14:52,000 --> 00:15:05,000
우변을 추가 열로 가져올게요. 여기 B가 와요. 2, 12, 이걸 확장 행렬이라고 불러요.

131
00:15:05,000 --> 00:15:11,000
"확장"은 뭔가를 붙였다는 뜻이에요. 이 추가 열을 붙였죠.

132
00:15:11,000 --> 00:15:17,000
방정식을 다룰 때는 양쪽에 같은 작업을 하니까요.

133
00:15:17,000 --> 00:15:26,000
이 단계에서 첫 번째 방정식의 2배를 두 번째 방정식에서 뺐어요. 그래서 이 확장—

134
00:15:26,000 --> 00:15:31,000
색깔 분필도 가져왔는데, 보일지 모르겠네요.

135
00:15:31,000 --> 00:15:39,000
아니에요! 잘못된 걸 동그라미 쳤네요.

136
00:15:39,000 --> 00:15:46,000
좋아요. 여기 b가 있어요. 이게 추가 열이에요.

137
00:15:46,000 --> 00:15:51,000
그럼 첫 번째 단계를 했을 때 이 추가 열, 방정식의 우변이 어떻게 됐을까요?

138
00:15:51,000 --> 00:15:57,000
이건 3을 곱해서 뺐으니까, 2는 그대로고, 12에서 세 개의 2를 빼면 6이 남고, 이 2는 그대로예요.

139
00:15:57,000 --> 00:16:04,000
이게 중간에 어떻게 보이는지예요. 끝까지 해볼게요.

140
00:16:04,000 --> 00:16:11,000
2와 6은 그대로고, 하지만—

141
00:16:11,000 --> 00:16:16,000
여기 뭐가 있죠? 아, 이런.

142
00:16:16,000 --> 00:16:23,000
도와주세요. 이제—이건 여전히 전방 소거법이에요.

143
00:16:23,000 --> 00:16:29,000
여기까지 왔는데, 맞는 것 같아요. 이제 이 단계에서 뭘 했죠?

144
00:16:29,000 --> 00:16:38,000
그 피벗을 2로 곱했거나 그 전체 방정식을 2로 곱해서 뺐어요.

145
00:16:38,000 --> 00:16:43,000
그러니까 6을 두 번, 그러니까 12를 2에서 빼면 돼요.

146
00:16:43,000 --> 00:16:49,000
-10이 마지막 우변인가요—

147
00:16:49,000 --> 00:16:56,000
U와 함께 가는 우변인데, 이걸 영원히 벡터 c라고 부를게요.

148
00:16:56,000 --> 00:17:04,000
그래서 c는 b에 일어나는 거고, U는 A에 일어나는 거예요.

149
00:17:04,000 --> 00:17:11,000
좋아요. 여기서 소거법을 깔끔하게 봤어요.

150
00:17:11,000 --> 00:17:16,000
아, 역대입이 뭐죠? 그럼 마지막 방정식이 뭐예요?

151
00:17:16,000 --> 00:17:34,000
이 방정식들을 복사할게요? x+2y+z=2는 여전히 있고, 2y-2z=6이 있고, 5z=-10이에요.

152
00:17:34,000 --> 00:17:40,000
좋아요. 이 숫자들이 말해주는 방정식이에요.

153
00:17:40,000 --> 00:17:46,000
이건 U x = c인 방정식이에요.

154
00:17:46,000 --> 00:17:52,000
좋아요, 이걸 어떻게 풀까요? 먼저 뭘 풀어야 하나요?

155
00:17:52,000 --> 00:17:59,000
z예요. 바로 z의 올바른 값이 -2라는 걸 알 수 있어요.

156
00:17:59,000 --> 00:18:07,000
다음엔 뭘 하나요? 위로 올라가요. 여기서 z를 알았어요.

157
00:18:07,000 --> 00:18:12,000
z가 -2면, 여기가 4예요, 맞죠?

158
00:18:12,000 --> 00:18:17,000
그럼 2y 더하기 4가 6이니까, y가 1인가요?

159
00:18:17,000 --> 00:18:23,000
이게 역대입이에요. 너무 쉬워서 바로 하고 있어요.

160
00:18:23,000 --> 00:18:31,000
그럼 x는—2y가 2니까, 2 빼기 2, x가 2인가요?

161
00:18:31,000 --> 00:18:38,000
역대입이 뭔지 아시겠죠.

162
00:18:38,000 --> 00:18:46,000
방정식을 역순으로 푸는 간단한 단계예요. 시스템이 삼각형이니까요.

163
00:18:46,000 --> 00:18:52,000
좋아요. 좋아요.

164
00:18:52,000 --> 00:18:57,000
이게 소거법과 역대입이고, 우변을 계속 따라갔어요.

165
00:18:57,000 --> 00:19:04,000
좋아요, 이제 뭐죠? 강의의 첫 번째 부분이에요.

166
00:19:04,000 --> 00:19:11,000
두 번째 부분은 뭐죠? 행렬이 들어올 거예요.

167
00:19:11,000 --> 00:19:17,000
x, y, z로 썼던 걸 적었고, 그다음엔

168
00:19:17,000 --> 00:19:24,000
정말 올바른 축약으로 행렬 항목만 썼죠.

169
00:19:24,000 --> 00:19:32,000
이제 제가 한 연산을 행렬로 쓰고 싶어요, 맞죠?

170
00:19:32,000 --> 00:19:42,000
행렬을 계속 따라갔지만, 그 소거 단계 연산을

171
00:19:42,000 --> 00:19:49,000
이제 행렬로 표현하고 싶어요. 좋아요. 여기 나와요.

172
00:19:49,000 --> 00:19:55,000
이제 소거 행렬이에요.

173
00:19:55,000 --> 00:20:02,000
첫 번째 단계를 가져가 볼게요. 1 2 1 3 8 1에서

174
00:20:02,000 --> 00:20:09,000
0 4 1로 갔죠.

175
00:20:09,000 --> 00:20:16,000
그걸로 소거를 하고 싶어요.

176
00:20:16,000 --> 00:20:29,000
좋아요. 이제 특히 중요한 점을 기억났어요.

177
00:20:29,000 --> 00:20:36,000
보드를 올려놓고 그걸 해볼게요.

178
00:20:36,000 --> 00:20:41,000
행렬 연산을 할 때는 큰 그림을 볼 수 있어야 하니까요.

179
00:20:41,000 --> 00:20:50,000
지난번에 행렬을 우변에 곱할 때 큰 그림에 대해 말했어요.

180
00:20:50,000 --> 00:20:55,000
만약 여기 행렬이 있고 3 4 5를 곱한다고 해보면—

181
00:20:55,000 --> 00:21:02,000
여기 행렬이 있어요—제가 뭐라고 했는지 기억나세요?

182
00:21:02,000 --> 00:21:08,000
그 행렬 곱셈을 어떻게 봤는지요?

183
00:21:08,000 --> 00:21:21,000
행렬에 벡터를 곱한 결과는 행렬의 열들의 조합이에요.

184
00:21:21,000 --> 00:21:33,000
첫 번째 열에 3을 곱하고, 두 번째 열에 4를 곱하고, 세 번째 열에 5를 곱한 거예요.

185
00:21:33,000 --> 00:21:39,000
좋아요. 이건 여러 번 다시 나올 거예요.

186
00:21:39,000 --> 00:21:51,000
이제 행에 대해 평행한 걸 강조하고 싶어요. 왜냐하면요?

187
00:21:51,000 --> 00:21:59,000
이 강의의 2주 동안 모든 연산이 행 연산이니까요.

188
00:21:59,000 --> 00:22:10,000
이건 행 연산에 필요한 게 아니에요.

189
00:22:10,000 --> 00:22:20,000
행 연산을 해볼게요. 다시 제 행렬이 있고,

190
00:22:20,000 --> 00:22:28,000
왼쪽에서 1 2 7을 곱한다고 해보면요.

191
00:22:28,000 --> 00:22:33,000
다시 결과가 뭔지 말하는 거예요.

192
00:22:33,000 --> 00:22:40,000
그다음에 행렬 곱셈이 어떻게 작동하는지 보고 그게 맞는지 볼게요.

193
00:22:40,000 --> 00:22:45,000
좋아요. 하지만 이미 제가—

194
00:22:45,000 --> 00:22:55,000
선형대수의 중심 아이디어를 끌어내고 있어요. 행렬이 열 뿐만 아니라 행으로도 어떻게 작동하는지예요.

195
00:22:55,000 --> 00:23:05,000
좋아요. 행으로는 어떻게 작동하나요? 뭐가—

196
00:23:05,000 --> 00:23:11,000
이건 행 벡터예요. 1x3 행렬, 행 벡터가 3x3 행렬을 곱하는 거예요.

197
00:23:11,000 --> 00:23:17,000
출력이 뭐죠?

198
00:23:17,000 --> 00:23:23,000
행과 행렬의 곱은 뭐예요?

199
00:23:23,000 --> 00:23:29,000
그리고—좋아요, 행이에요. 행—열—

200
00:23:29,000 --> 00:23:33,000
미안해요. 행렬에 열을 곱하면 열이 나오고요.

201
00:23:35,000 --> 00:23:41,000
행렬에 열을 곱하면 열이 나와요.

202
00:23:41,000 --> 00:23:47,000
그리고 그게 어떤 열인지 알아요. 여기서는 행에 행렬을 곱하고 있어요.

203
00:23:47,000 --> 00:23:53,000
그 답이 뭐죠? 첫 번째 행을 하나 가져오니까, 1 곱하기—

204
00:23:53,000 --> 00:24:05,000
1 곱하기 첫 번째 행, 더하기 2 곱하기 두 번째 행, 더하기 7 곱하기 세 번째 행이에요.

205
00:24:05,000 --> 00:24:13,000
행렬 곱셈을 할 때, 전체 벡터에 어떤 일이 일어나는지 주의 깊게 보세요.

206
00:24:13,000 --> 00:24:20,000
그리고 그게 뭘 하는 거냐면—이 경우에는 행들을 조합하는 거예요.

207
00:24:20,000 --> 00:24:26,000
행들의 선형 조합이 생기죠. 좋아요, 그걸 사용하고 싶어요.

208
00:24:33,000 --> 00:24:38,000
그럼 제 질문은, 이 첫 번째 단계를 수행하는 행렬이 뭐냐는 거예요.

209
00:24:38,000 --> 00:24:44,000
첫 번째 방정식의 3배를 두 번째 방정식에서 빼는 걸요? 그걸 하고 싶어요.

210
00:24:44,000 --> 00:25:03,000
그래서 이건 첫 번째 행의 3배를 두 번째 행에서 빼고, 다른 행들은 그대로 두는 행렬이 될 거예요.

211
00:25:03,000 --> 00:25:09,000
그냥—결과는 저게 될 거예요.

212
00:25:09,000 --> 00:25:15,000
그래서 이 행렬이 뭐든 간에—여러분이 저에게 어떤 행렬이 그걸 하는지 알려줄 거예요,

213
00:25:15,000 --> 00:25:23,000
첫 번째 행을 그대로 두고, 마지막 행도 그대로 두지만, 이걸 3번 빼서 여기 0을 만들고, 여기 2, 그리고 -2를 만드는 행렬이에요. 좋아요.

214
00:25:23,000 --> 00:25:29,000
어떤 행렬이 그걸 할까요? 이런 거예요. 꽤 단순한 행렬이어야 해요,

215
00:25:29,000 --> 00:25:35,000
왜냐하면 아주 간단한 단계를 하고 있으니까요. 두 번째 행만 바꾸는 거예요.

216
00:25:35,000 --> 00:25:43,000
사실 첫 번째 행은 안 바뀌죠. 그럼 행렬이 어떻게 시작해야 하는지 알려주세요.

217
00:25:43,000 --> 00:25:51,000
1—행렬의 첫 번째 행은 1 0 0이 될 거예요,

218
00:25:51,000 --> 00:26:01,000
왜냐하면 그게 첫 번째 행을 하나 가져오고 다른 행은 전혀 안 가져오는 정확한 값이니까요, 그게 우리가 원하는 거예요.

219
00:26:01,000 --> 00:26:08,000
행렬의 마지막 행은 뭐죠? 0 0 1이에요, 왜냐하면 세 번째 행을 하나 가져오고 다른 행은 안 가져오니까요, 좋아요.

220
00:26:08,000 --> 00:26:17,000
좋아요. 이제 아무것도 안 하고 싶다고 가정해보면요.

221
00:26:17,000 --> 00:26:24,000
제 행이—여기 이미 0이 있어서 아무것도 안 했던 경우가 있었던 것 같네요.

222
00:26:24,000 --> 00:26:33,000
아무것도 안 하는 행렬은 뭐죠? 그냥 원래 상태로 놔두는 거요?

223
00:26:33,000 --> 00:26:40,000
만약 제가 0 1 0을 넣으면—그건—

224
00:26:40,000 --> 00:26:49,000
그게 그 행렬인데—그 행렬의 이름이 뭐죠? 단위 행렬(identity matrix), 맞죠.

225
00:26:49,000 --> 00:26:55,000
그래서 아무것도 안 해요. 그냥 모든 걸 곱해서 원래대로 놔두죠. 행렬에서 숫자 1 같은 거예요.

226
00:26:55,000 --> 00:27:03,000
하지만 그건 우리가 원하는 게 아니에요, 왜냐하면 이 행을 바꾸고 싶으니까요—그럼 올바른 건 뭐죠—

227
00:27:03,000 --> 00:27:11,000
여기에 뭘 넣어야 제대로 될까요?

228
00:27:11,000 --> 00:27:16,000
제가 원하는 건—뭘 원하냐면—첫 번째 행의 3배를 빼고 싶은 거예요.

229
00:27:16,000 --> 00:27:24,000
그래서 올바른 행렬은 뭐죠, 저를 위해 그 행렬을 완성해 주세요.

230
00:27:24,000 --> 00:27:32,000
여기에 -3이 들어가나요? 그리고 여기는 뭐죠? 1이에요.

231
00:27:32,000 --> 00:27:38,000
그리고 여기는요? 0이에요. 그게 좋은 행렬이에요.

232
00:27:38,000 --> 00:27:46,000
그 행렬은 첫 번째 행의 -3배와 두 번째 행을 더해서 새로운 두 번째 행을 만들어요.

233
00:27:46,000 --> 00:27:57,000
특정 항목을 확인해볼까요? 행렬 곱셈에서 특정 항목을 어떻게 확인하나요?

234
00:27:57,000 --> 00:28:03,000
예를 들어 여기, 2행 3열에 있는 항목을 확인하고 싶다고 해보면요.

235
00:28:03,000 --> 00:28:09,000
그럼 2행 3열의 항목이 어디서 오나요?

236
00:28:09,000 --> 00:28:16,000
이 행렬의 2행과 이 행렬의 3열을 보고 그 숫자를 얻을 거예요.

237
00:28:16,000 --> 00:28:26,000
그 숫자는 두 번째 행과 세 번째 열에서 오고, 이 내적을 계산하면 -3—

238
00:28:26,000 --> 00:28:34,000
곱하면— -3 더하기 1 더하기 0이 -2가 되죠.

239
00:28:34,000 --> 00:28:39,000
네. 맞아요. 이제 행렬을 곱하는 여러 방법을 얻었네요.

240
00:28:39,000 --> 00:28:46,000
좀 비공식적으로요. 열로도 하고, 행으로도 하고, 한 번에 각 항목으로도 할 수 있어요.

241
00:28:46,000 --> 00:28:52,000
하지만 한쪽 행렬이 이렇게 단순할 때 행렬 곱셈을 보는 게 좋아요.

242
00:28:52,000 --> 00:29:01,000
그래서 이건 우리의 기초 행렬(elementary matrix)이에요.

243
00:29:01,000 --> 00:29:08,000
E라고 부를게요, 기초적이거나 소거(elimination)를 뜻해요. 그리고 2 1이라는 인덱스를 붙일게요,

244
00:29:08,000 --> 00:29:18,000
왜냐하면 이건 2 1 위치를 고치기 위해 필요한 행렬이니까요.

245
00:29:18,000 --> 00:29:25,000
이 2 1 위치를 괜찮게 만들기 위해 필요한 행렬이에요. 좋아요.

246
00:29:25,000 --> 00:29:32,000
그럼 다음엔 뭘 하죠? 또 다른 행렬이 필요하죠?

247
00:29:32,000 --> 00:29:39,000
여기 또 다른 단계가 있어요. 전체 소거 과정을 행렬 언어로 표현하고 싶어요.

248
00:29:39,000 --> 00:29:46,000
그럼 두 번째 단계가 뭐였는지 알려주세요.

249
00:29:46,000 --> 00:29:54,000
빼기—우리가 실제로 한 단계가 뭐였죠?

250
00:29:54,000 --> 00:29:59,000
생각해보니까—기억나세요? 피벗에 2가 있고 그 아래에 4가 있었어요,

251
00:29:59,000 --> 00:30:06,000
그래서 두 번째 행의 2배를 세 번째 행에서 뺐어요.

252
00:30:06,000 --> 00:30:16,000
세 번째 행에서요. 그걸 하는 행렬을 알려주세요.

253
00:30:16,000 --> 00:30:23,000
그리고 그 이름을 알려주세요. 좋아요, E가 될 거예요, 기초적이거나 소거 행렬을 뜻하고

254
00:30:23,000 --> 00:30:31,000
제가 어떤 E인지 알려주는 인덱스 숫자가 뭐죠—

255
00:30:31,000 --> 00:30:38,000
3, 2죠? 왜냐하면 이건 3 2 위치를 고치는 거니까요.

256
00:30:38,000 --> 00:30:43,000
그럼 그 행렬이 뭐죠? 좋아요, 기억하세요—E 3 2는 제 행렬에 곱해져서

257
00:30:43,000 --> 00:30:52,000
올바른 결과를 만들어야 해요,

258
00:30:52,000 --> 00:30:58,000
그건—첫 번째 행을 그대로 두고, 두 번째 행도 그대로 두고,

259
00:30:58,000 --> 00:31:05,000
세 번째 행을 이렇게 정리해야 해요.

260
00:31:05,000 --> 00:31:10,000
그걸 하는 행렬이 뭐죠?

261
00:31:10,000 --> 00:31:15,000
1 0 0이죠? 왜냐하면 첫 번째 행을 안 바꾸니까요.

262
00:31:15,000 --> 00:31:21,000
다음 행도 안 바꾸고, 마지막 행만 바꿔요.

263
00:31:21,000 --> 00:31:27,000
그럼 뭘 하죠? 보세요, 2배를 빼니까—

264
00:31:27,000 --> 00:31:33,000
여기 뭐죠? 0이죠, 첫 번째 행은 관련 없으니까요.

265
00:31:33,000 --> 00:31:41,000
3 2 위치에만 관련 있죠? 핵심 숫자는 여기 있는 이거에서 빼는 곱셈 값이에요.

266
00:31:41,000 --> 00:31:49,000
2를 빼려면 -2가 되나요? 그리고 여기가 1이니까—

267
00:31:49,000 --> 00:31:59,000
전체 효과는 이 행의 -2배와 이 행의 1배를 더하는 거예요.

268
00:31:59,000 --> 00:32:06,000
좋아요. 이제 소거 행렬, 각 단계를 수행하는 기초 행렬을 드렸어요.

269
00:32:06,000 --> 00:32:15,000
이제 뭐죠? 이제 강의의 다음 포인트는

270
00:32:15,000 --> 00:32:21,000
그 단계들을 하나로 묶어서 모든 걸 하는 행렬을 만들고 그게 어떻게 되는지 보는 거예요.

271
00:32:21,000 --> 00:32:27,000
이제 오늘 우리가 A에서 한 모든 걸 표현할 거예요.

272
00:32:27,000 --> 00:32:34,000
A로 시작해서, E 2 1을 곱했어요, 그게 첫 번째 단계였고—

273
00:32:34,000 --> 00:32:46,000
그 결과에 E 3 2를 곱해서 이걸 얻었어요.

274
00:32:46,000 --> 00:32:53,000
그 행렬이 뭐였죠? U였어요.

275
00:32:53,000 --> 00:33:01,000
제가 행렬 표기법을 좋아하는 이유를 아시겠죠? 왜냐하면 이렇게 작은 공간에—

276
00:33:01,000 --> 00:33:10,000
웹에서 압축하면 몇 비트로—이 전체 강의가 담기니까요.

277
00:33:10,000 --> 00:33:18,000
좋아요. 이제 행렬 곱셈에 관한 중요한 사실이 있어요.

278
00:33:18,000 --> 00:33:25,000
그리고 그 중 아마 가장 중요한 것에 가까워졌어요.

279
00:33:25,000 --> 00:33:33,000
그건 이거예요. 제가 이런 질문을 한다고 해보면요.

280
00:33:33,000 --> 00:33:40,000
A 행렬로 시작해서 U 행렬로 끝내고 싶다고 하면, 전체 작업을 하는 행렬이 뭐냐고요?

281
00:33:40,000 --> 00:33:49,000
제가 가진 문자로 A에서 U로 가는 행렬이 뭐냐는 거죠?

282
00:33:49,000 --> 00:33:55,000
답은 간단해요. 이건 질문으로 묻는 게 아니지만 정말 중요해요.

283
00:33:55,000 --> 00:34:05,000
한 번에 전체 작업을, 소거를 모두 한꺼번에 하는 행렬을 어떻게 만들까요?

284
00:34:05,000 --> 00:34:13,000
그건—이것들을 합치면 되죠, 맞죠? 다시 말해, 제가 말하려고 애쓰는 건 이거예요.

285
00:34:13,000 --> 00:34:19,000
괄호를 옮길 수 있어요. 행렬의 순서를 바꾸지 않는다면—

286
00:34:19,000 --> 00:34:24,000
행렬 순서를 망칠 수는 없지만, 곱셈을 하는 순서는 바꿀 수 있어요.

287
00:34:24,000 --> 00:34:34,000
이 둘을 먼저 곱할 수 있죠—

288
00:34:34,000 --> 00:34:41,000
다시 말해, 이 괄호가 뭘 하는지 보이시죠? E들을 먼저 곱하라고 하는 거예요.

289
00:34:41,000 --> 00:34:49,000
그러면 한 번에 모든 걸 하는 행렬이 나와요.

290
00:34:49,000 --> 00:34:55,000
좋아요. 이 사실, 즉 이게 자동으로 이거와 같다는 게—

291
00:34:55,000 --> 00:35:04,000
모든 행렬 곱셈에서 그렇다는 거예요. 아직 모든 세부사항을 다 말하지 않았다는 걸 알고 있지만,

292
00:35:04,000 --> 00:35:13,000
어떻게 작동하는지 보고 있죠—그리고 이건 정말 중요해요—

293
00:35:13,000 --> 00:35:20,000
괄호를 옮길 수 있다는 이 행렬의 법칙을 설명하는 긴 단어가 뭐죠?

294
00:35:20,000 --> 00:35:27,000
그건 결합 법칙(associative law)이라고 해요. 이제 그건 잊어도 돼요.

295
00:35:27,000 --> 00:35:37,000
하지만 그 법칙은 잊지 마세요. "결합"이라는 단어는 잊어도 되는데, 잘 모르겠네요.

296
00:35:37,000 --> 00:35:45,000
법칙은 잊지 마세요. 왜냐하면 선형대수학에서 많은 단계,

297
00:35:45,000 --> 00:35:51,000
주요 사실의 증명조차도 괄호를 옮기는 데서 나오니까요.

298
00:35:51,000 --> 00:35:59,000
그리고 이게 맞다는 걸 증명하는 건 쉽지 않아요,

299
00:35:59,000 --> 00:36:05,000
행렬 곱셈의 지저분한 세부사항으로 들어가서 양쪽 다 해보고 같은 결과가 나오는지 봐야 해요.

300
00:36:05,000 --> 00:36:15,000
그건 저자에게 맡길게요.

301
00:36:15,000 --> 00:36:20,000
좋아요. 그럼 됐네요.

302
00:36:20,000 --> 00:36:27,000
그래서 단일 행렬이 있어요, E라고 부를 수 있죠—

303
00:36:27,000 --> 00:36:34,000
이 행렬들에 대해 이야기하면서, 다른 하나를 알려주세요—

304
00:36:34,000 --> 00:36:40,000
다른 종류의 기초 행렬이 있어요. 우리가 왜 그게 필요할지도 이미 말했죠.

305
00:36:40,000 --> 00:36:45,000
이 경우에는 필요 없었지만요. 그건 두 행을 교환하는 행렬이에요.

306
00:36:45,000 --> 00:36:52,000
그건 순열 행렬(permutation matrix)이라고 해요.

307
00:36:52,000 --> 00:36:58,000
그게 뭔지 그냥 알려줄 수 있나요? 제가 살짝—

308
00:36:58,000 --> 00:37:06,000
이건 약간의 여담이고, 예, 어디에 순열 행렬을 넣을지 생각해볼게요.

309
00:37:06,000 --> 00:37:12,000
항상 뭔가를 끼워 넣고 있죠.

310
00:37:12,000 --> 00:37:19,000
순열이요. 사실 이건 행을 교환하는 거예요—

311
00:37:19,000 --> 00:37:33,000
1행과 2행을 교환할까요, 쉽게 하려고요? 제 행렬이—아니, 그냥 2x2로 할게요.

312
00:37:33,000 --> 00:37:41,000
|a b; c d|. 이 행들을 교환하는 행렬을 찾고 싶다고 해보면요.

313
00:37:41,000 --> 00:37:49,000
그게 뭐죠? 행을 교환하는 행렬은—

314
00:37:49,000 --> 00:37:55,000
제가 원하는 행은 c d이고, 여기 있어요. 그럼 그걸 하나 가져와야죠.

315
00:37:55,000 --> 00:38:01,000
여기 원하는 행은 위에 있으니까, 그걸 하나 가져오죠.

316
00:38:01,000 --> 00:38:07,000
사실—쉽게 하는 방법은 이거예요. 이걸 P라고 부를게요, 순열(permutation)을 뜻해요.

317
00:38:07,000 --> 00:38:13,000
그 행렬은—사실 쉽게 찾는 방법은 단위 행렬에 그 작업을 하는 거예요.

318
00:38:13,000 --> 00:38:21,000
단위 행렬의 행을 교환하면, 그게 여러분을 위해 행 교환을 해주는 행렬이 돼요.

319
00:38:21,000 --> 00:38:26,000
대신 열을 교환하고 싶다고 해보면요.

320
00:38:26,000 --> 00:38:32,000
열은 오늘 강의에서 거의 다루지 않았지만, 분명히 나올 거예요.

321
00:38:32,000 --> 00:38:38,000
어떻게—이 행렬 |a b; c d|로 시작해서

322
00:38:38,000 --> 00:38:45,000
이건 쓰지도 않을게요, 그냥 물어볼게요. 왜냐하면 소거에서는 행을 다루고 있으니까요.

323
00:38:45,000 --> 00:38:53,000
하지만 행렬의 열을 교환하고 싶다고 해보면요.

324
00:38:53,000 --> 00:39:03,000
그걸 어떻게 하죠?

325
00:39:03,000 --> 00:39:10,000
어떤 행렬 곱셈이 그 작업을 할까요? 사실, 왜 안 되겠어요? 써놓겠습니다.

326
00:39:10,000 --> 00:39:15,000
여기 아래에 쓰고 다시 숨길게요.

327
00:39:15,000 --> 00:39:22,000
좋아요. 제 행렬이 |a b; c d|이고, 여기서 a c를, 여기서 b d를 얻고 싶다고 해보면요.

328
00:39:22,000 --> 00:39:28,000
그 작업을 하는 행렬이 뭐죠?

329
00:39:28,000 --> 00:39:38,000
곱할 수 있나요—그 답을 만드는 어떤 행렬을 만들 수 있나요?

330
00:39:38,000 --> 00:39:44,000
제가 손을 어디에 뒀는지 보면 제가 정말로 묻고 싶은 건

331
00:39:44,000 --> 00:39:52,000
왼쪽에 행렬을 넣어서 열을 교환할 수 있냐는 거였어요. 답은 아니에요.

332
00:39:52,000 --> 00:39:58,000
다시 이 점을 꺼내는 거예요. 왼쪽에서 곱하면 행 연산을 하는 거예요.

333
00:39:58,000 --> 00:40:04,000
그럼 열 연산을 하고 싶으면 순열 행렬을 어디에 넣죠?

334
00:40:04,000 --> 00:40:09,000
오른쪽에요. 여기 넣으면, 공간을 간신히 남겨놨는데—

335
00:40:09,000 --> 00:40:16,000
단위 행렬의 두 열을 교환할게요.

336
00:40:16,000 --> 00:40:22,000
그럼 제대로 나와요, 왜냐하면 이제 열 단위로 곱하니까요.

337
00:40:22,000 --> 00:40:29,000
이건 첫 번째 열이고, 이 열은 안 가져오고 이걸 하나 가져오라고 하니까요.

338
00:40:29,000 --> 00:40:35,000
여기서는 이걸 하나 가져오고, 이건 안 가져오니까 a c가 나와요.

339
00:40:35,000 --> 00:40:40,000
간단히 말해, 열 연산을 하려면 행렬을 오른쪽에서 곱해요.

340
00:40:40,000 --> 00:40:45,000
행 연산을 하려면 왼쪽에서 곱하고요. 좋아요, 좋아요.

341
00:40:45,000 --> 00:40:52,000
우리가 정말 하고 있는 건 행 연산이에요.

342
00:40:52,000 --> 00:40:58,000
물론 지나가면서 언급했지만, 아주 분명히 말해야겠네요.

343
00:40:58,000 --> 00:41:04,000
행렬의 순서를 바꿀 수 없어요.

344
00:41:04,000 --> 00:41:11,000
그게 제가 여기서 다시 강조한 포인트예요. A 곱하기 B는 B 곱하기 A와 같지 않아요.

345
00:41:11,000 --> 00:41:18,000
이 행렬들을 가우스가 준 순서대로 유지해야 해요,

346
00:41:18,000 --> 00:41:30,000
맞죠? 하지만 괄호는 옮길 수 있어요,

347
00:41:30,000 --> 00:41:39,000
다시 말해, 순서를 반대로 할 수 있게 해주는 교환 법칙(commutative law)은 거짓이에요.

348
00:41:39,000 --> 00:41:46,000
그래서 이 순서를 지켜야 해요. 좋아요. 그럼 다음은 뭐죠?

349
00:41:46,000 --> 00:41:52,000
이 곱셈을 할 수 있죠.

350
00:41:52,000 --> 00:42:03,000
E 3 2를 해볼게요. 그게 뭐였는지 다시 볼게요.

351
00:42:03,000 --> 00:42:10,000
여기 E 2 1이 있었고, 여기가 E 3 2예요.

352
00:42:10,000 --> 00:42:16,000
이 두 행렬을 곱하면—

353
00:42:16,000 --> 00:42:24,000
E 3 2와 E 2 1을 곱하면, 소거를 하는 단일 행렬을 얻어요.

354
00:42:24,000 --> 00:42:33,000
그렇게 곱하고 싶지는—만약 그 곱셈을 하면—

355
00:42:33,000 --> 00:42:39,000
더 나은 방법이 있어요.

356
00:42:39,000 --> 00:42:49,000
그래서 오늘 강의의 마지막 몇 분 동안, 그 더 나은 방법을 미리 볼 수 있을까요?

357
00:42:49,000 --> 00:42:55,000
더 나은 방법은 A에서 U로 가는 게 아니라,

358
00:42:55,000 --> 00:43:00,000
U에서 A로 돌아가는 방법을 생각하는 거예요.

359
00:43:00,000 --> 00:43:08,000
그래서 단계를 되돌리는 게 나올 거예요. 여기서 역(inverse)이라는 단어를 사용할게요.

360
00:43:08,000 --> 00:43:15,000
좋아요. 그럼 역행렬이 뭔지 첫 단계를 밟아볼게요.

361
00:43:15,000 --> 00:43:20,000
이 칠판에서 본 모든 행렬은 역행렬이 있어요.

362
00:43:20,000 --> 00:43:28,000
나쁜 행렬은 쓰지 않았어요. 실패 가능성에 대해 이야기했고, 잠깐

363
00:43:28,000 --> 00:43:37,000
실패할 행렬을 넣었지만, 지금은 이 모든 행렬이 좋아요,

364
00:43:37,000 --> 00:43:43,000
모두 역행렬이 존재해요. 그럼 역행렬을 구해보죠—먼저 역행렬이 뭔지 말하고 찾을게요.

365
00:43:43,000 --> 00:43:50,000
좋아요. 역행렬에 대해 조금 앞서가고 있어요.

366
00:43:50,000 --> 00:43:56,000
좋아요, 이게 오늘의 마지막 순간이에요.

367
00:43:56,000 --> 00:44:04,000
미안해요, 아직 거기 있어요.

368
00:44:04,000 --> 00:44:10,000
좋아요. 역행렬이에요.

369
00:44:10,000 --> 00:44:16,000
하나 예를 들고 끝낼게요. 제가 들 예는 그 E예요.

370
00:44:16,000 --> 00:44:22,000
제 행렬은 1 0 0, -3 1 0, 0 0 1이에요.

371
00:44:22,000 --> 00:44:31,000
그 단계를 되돌리는 행렬을 찾고 싶어요.

372
00:44:31,000 --> 00:44:39,000
그 단계가 뭐였죠? 그 단계는 첫 번째 행의 3배를 두 번째 행에서 빼는 거였어요.

373
00:44:39,000 --> 00:44:45,000
그럼 저를 되돌리는 행렬이 뭐죠?

374
00:44:45,000 --> 00:44:55,000
뭐가 다시—만약 제가 2 12 2로 시작해서 이걸로 2 6 2로 바꿨다면,

375
00:44:55,000 --> 00:45:03,000
2 12로 돌아가고 싶어요. 소거를 되돌리고, 이걸 곱해서 단위 행렬을 주는 행렬을 찾고 싶어요.

376
00:45:03,000 --> 00:45:10,000
먼저 말이 아니라 말로 뭘 해야 하는지 알려주세요, 그다음에 그걸 하는 행렬을 쓸게요.

377
00:45:10,000 --> 00:45:19,000
이 단계가 첫 번째 행의 3배를 두 번째 행에서 뺐다면, 역단계는 뭐죠?

378
00:45:19,000 --> 00:45:25,000
첫 번째 행의 3배를 두 번째 행에 더하는 거죠, 맞죠?

379
00:45:25,000 --> 00:45:33,000
다시 더해요. 뺐던 걸 다시 더하는 거예요.

380
00:45:33,000 --> 00:45:38,000
그래서 이 경우 역행렬은—

381
00:45:38,000 --> 00:45:45,000
이제 첫 번째 행의 3배를 두 번째 행에 더하고 싶어요. 첫 번째 행은 안 바꾸고, 세 번째 행도 안 바꾸고

382
00:45:45,000 --> 00:45:51,000
첫 번째 행의 3배를 두 번째 행에 더할게요.

383
00:45:51,000 --> 00:46:02,000
이건 역행렬이 명확한 경우예요. 말이로 뭘 해야 하는지 명확하죠,

384
00:46:02,000 --> 00:46:08,000
왜냐하면 이게 한 건 두 번째 행을 첫 번째 행의 3배를 빼서 바꾼 간단한 거니까요.

385
00:46:08,000 --> 00:46:17,000
그럼 반대로 가면 돼요. 만약 그 계산을 하면, 이 행의 3배 더하기 이 행의 1배면,

386
00:46:17,000 --> 00:46:23,000
단위 행렬의 올바른 행이 나와요.

387
00:46:23,000 --> 00:46:33,000
좋아요, 그래서 역행렬은—

388
00:46:33,000 --> 00:46:43,000
이 행렬이 E고, 이 행렬이 단위 행렬 I라면,

389
00:46:43,000 --> 00:46:51,000
이건 뭐라고 표기하죠? E의 -1승.

390
00:46:51,000 --> 00:46:57,000
E 역행렬(inverse)이에요. 좋아요. 오늘은 여기서 멈출게요.

391
00:46:57,000 --> 00:47:05,000
월요일에 나올 걸 조금 앞서간 거예요. 그럼 월요일에 봐요.

392
00:47:05,000 --> 00:47:11,000