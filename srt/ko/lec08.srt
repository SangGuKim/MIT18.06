1
00:00:05,000 --> 00:00:13,000
네, 카메라 신호가 켜지면 시작하겠습니다. 신호를 주시겠어요?

2
00:00:13,000 --> 00:00:27,000
좋습니다. 이것은 선형대수학의 8번째 강의이며, 이번 강의에서는 선형방정식을 완전히 풀어보겠습니다. 즉, Ax=b입니다.

3
00:00:27,000 --> 00:00:32,000
이것이 우리의 목표입니다. 물론 해가 있을 경우에만 가능합니다.

4
00:00:32,000 --> 00:00:40,000
해가 없는 경우도 분명히 발생할 수 있습니다. 우리는 소거법(elimination)을 통해 그런 가능성을 식별해야 합니다.

5
00:00:40,000 --> 00:00:57,000
그리고 해가 있다면, 유일한 해가 있는지 아니면 해의 집합이 있는지 확인하고, 모든 해를 찾아야 합니다. 좋습니다. 지난 시간에 영공간(null space)을 찾을 때 사용했던 동일한 행렬을 예시로 사용해도 될까요?

6
00:00:57,000 --> 00:01:10,000
그래서, 행렬의 행들은 1 2 2 2, 2 4 6 8,

7
00:01:10,000 --> 00:01:21,000
그리고 세 번째 행은 -- 주요 포인트는 세 번째 행인 3 6 8 10이 첫 번째 행과 두 번째 행의 합이라는 것이었습니다.

8
00:01:21,000 --> 00:01:28,000
다시 말해, 왼쪽 항들을 더하면 세 번째 왼쪽 항이 나온다는 것입니다.

9
00:01:28,000 --> 00:01:35,000
그래서 여러분은 소거법이 오른쪽 항들에 대해 무엇을 발견할 것인지 바로 말할 수 있을 겁니다.

10
00:01:35,000 --> 00:01:41,000
무엇이 -- 이 시스템이 해를 가지려면 b1, b2,

11
00:01:41,000 --> 00:01:50,000
그리고 b3에 대한 조건이 있습니다. 대부분의 경우 -- 만약 이 숫자들을 1,

12
00:01:50,000 --> 00:01:58,000
5, 그리고 17로 했다면, 해가 없을 것입니다. 사실, 첫 번째 숫자들이 1과 5라면,

13
00:01:58,000 --> 00:02:05,000
어떤 b3가 유효할까요? 6입니다.

14
00:02:05,000 --> 00:02:10,000
왼쪽 항들이 더해져서 저것이 된다면, 그러면 B --

15
00:02:10,000 --> 00:02:19,000
b1 더하기 b2가 b3와 같아야 합니다. 소거법이 어떻게 이것을 발견하는지 살펴봅시다.

16
00:02:19,000 --> 00:02:26,000
하지만 우리는 이미 예상할 수 있습니다, 그렇죠? 만약 -- 다른 말로 설명해 보겠습니다.

17
00:02:26,000 --> 00:02:33,000
왼쪽 항의 어떤 조합이 모두 0을 주면, 오른쪽 항의 동일한 조합도

18
00:02:33,000 --> 00:02:43,000
0을 주어야 합니다. 그럼 그 예시를 살펴보고 행렬을 작성해 봅시다.

19
00:02:43,000 --> 00:02:49,000
모든 더하기 기호를 복사하는 대신, 행렬을 작성하겠습니다.

20
00:02:49,000 --> 00:02:59,000
1 2 2 2, 2 4 6 8, 그리고 6 3 8 10,

21
00:02:59,000 --> 00:03:06,000
여기서 세 번째 행은 첫 번째와 두 번째 행의 합입니다. 이제 오른쪽 항은 어떻게 처리할까요?

22
00:03:06,000 --> 00:03:12,000
우리는 왼쪽 행에 하는 것과 동일한 작업을 오른쪽 항에도 해야 합니다,

23
00:03:12,000 --> 00:03:17,000
그래서 오른쪽 항을 다른 벡터, 다른 열로 추가합니다.

24
00:03:17,000 --> 00:03:26,000
이것이 증강행렬(augmented matrix)입니다.

25
00:03:26,000 --> 00:03:35,000
이것은 벡터 b가 추가된 행렬 A입니다.

26
00:03:35,000 --> 00:03:41,000
Matlab에서는 이것만 입력하면 됩니다. 좋습니다. 이제 소거법을 시행합니다.

27
00:03:41,000 --> 00:03:46,000
소거법을 빠르게 해볼까요? 첫 번째 피봇(pivot)은 괜찮습니다, 이것의 2배를 이것에서 빼고,

28
00:03:46,000 --> 00:03:54,000
이것의 3배를 이것에서 빼면, 1 2 2 2 b1이 됩니다.

29
00:03:54,000 --> 00:04:00,000
이것의 2배를 빼면 0 0 2와 4가 됩니다,

30
00:04:00,000 --> 00:04:07,000
그리고 그것은 b2 빼기 2b1입니다. 저는 마지막 열, 세 번째 열에도 동일한 작업을 해야 합니다.

31
00:04:07,000 --> 00:04:17,000
그런 다음 이것의 3배를 이것에서 빼면 0 0 2 4 b3 빼기 3b1이 됩니다.

32
00:04:17,000 --> 00:04:25,000
그래서 이것이 첫 번째 열이 완료된 소거법입니다.

33
00:04:25,000 --> 00:04:31,000
이제 계속 진행합니다. 여기 첫 번째 피봇이 아직 있습니다. 여기 두 번째 피봇이 있습니다.

34
00:04:31,000 --> 00:04:41,000
이제 이것들이 피봇 열(pivot columns)이 될 것임을 항상 기억합니다.

35
00:04:41,000 --> 00:04:55,000
최종 결과를 얻어 봅시다 -- 음, 지우개로 해도 될까요?

36
00:04:55,000 --> 00:05:00,000
이 행에서 이 행을 뺄 수 있습니다,

37
00:05:00,000 --> 00:05:08,000
이것이 완전히 사라지게 하고 0의 행을 얻습니다. 그리고 오른쪽에서는,

38
00:05:08,000 --> 00:05:16,000
이것을 이것에서 빼면 무엇이 남을까요?

39
00:05:16,000 --> 00:05:22,000
b3 빼기 b2가 됩니다, 그리고 이미 빼기 3b1이 있었습니다.

40
00:05:22,000 --> 00:05:28,000
이것은 빼기 b1이 될 것입니다. 맞습니다, 정확히 예상한 대로입니다.

41
00:05:28,000 --> 00:05:34,000
이제 -- 마지막 방정식은 무엇일까요?

42
00:05:34,000 --> 00:05:45,000
이 0 행으로 표현되는 마지막 방정식은 0 = b3 빼기 b2 빼기 b1이라고 말합니다.

43
00:05:45,000 --> 00:05:51,000
그래서 그것이 해결 가능성의 조건입니다.

44
00:05:51,000 --> 00:05:57,000
그것이 우리가 예상했던 오른쪽 항에 대한 조건입니다. 이것은 b1+b2가 b3와 일치해야 한다고 말합니다,

45
00:05:57,000 --> 00:06:07,000
그리고 만약 우리의 숫자들이 1, 5, 그리고 6이었다면 -- 그래서 b가 1 5 6이라고 가정해 봅시다.

46
00:06:07,000 --> 00:06:13,000
그것은 괜찮은 b입니다. 그리고 이 소거법을 수행하면 무엇이 남을까요?

47
00:06:13,000 --> 00:06:18,000
b1은 여전히 1입니다. b2는 5 빼기 2, 이것은 3이 됩니다.

48
00:06:18,000 --> 00:06:24,000
6 빼기 5 빼기 1, 이것은 --

49
00:06:24,000 --> 00:06:30,000
이것이 핵심 포인트입니다 -- 이것은 0이 됩니다, 감사합니다. 좋습니다.

50
00:06:30,000 --> 00:06:37,000
그래서 마지막 방정식은 이제 괜찮습니다.

51
00:06:37,000 --> 00:06:44,000
그리고 실제로 존재하는 두 방정식을 네 개의 미지수로 풀 수 있습니다.

52
00:06:44,000 --> 00:06:51,000
좋습니다, 그것을 하고 싶습니다. 이 b는 괜찮습니다. 해가 가능합니다.

53
00:06:51,000 --> 00:06:56,000
우리는 자연스럽게 방정식이 해결 가능하도록 하는

54
00:06:56,000 --> 00:07:11,000
b에 대한 조건을 추적하는 데 관심이 있을 것입니다. 계속하기 전에 우리가 이미 본 것을 적어봅시다.

55
00:07:11,000 --> 00:07:23,000
먼저 -- 해결 가능성, 해결 가능성에 대해 적어봅시다.

56
00:07:23,000 --> 00:07:31,000
그래서 어떤 -- 이것은 오른쪽 항에 대한 조건입니다.

57
00:07:31,000 --> 00:07:39,000
그리고 그 조건은 무엇일까요? 이것은 항상 Ax=b의 해결 가능성입니다.

58
00:07:39,000 --> 00:07:45,000
그래서 Ax=b가 해결 가능하다는 것은 --

59
00:07:45,000 --> 00:07:58,000
사실, 우리는 열 공간(column space)의 언어로 답을 가지고 있었습니다. 그 답이 무엇이었는지 기억나시나요? 그것은 이전 강의에서 우리의 답이었습니다.

60
00:07:58,000 --> 00:08:10,000
b는 열 공간에 있어야 했습니다. 해결 가능한 경우는 -- 정확히 b가 A의 열 공간에 있을 때입니다.

61
00:08:10,000 --> 00:08:17,000
맞습니다! 그것은 b가 열들의 조합이어야 한다고 말하는 것이고,

62
00:08:17,000 --> 00:08:25,000
물론 그것이 방정식이 찾고 있는 것입니다. 그래서 -- 이제 다른 언어로 같은 답을 하고 싶습니다.

63
00:08:25,000 --> 00:08:33,000
또 다른 방법으로 답하자면 --

64
00:08:33,000 --> 00:08:52,000
A의 행들의 조합이 0 행을 주면,

65
00:08:52,000 --> 00:09:00,000
그리고 이것은 그것이 발생한 예시였습니다, A의 행들의 어떤 조합이 0 행을 생성했습니다 --

66
00:09:00,000 --> 00:09:07,000
그럼 b에 대한 요구 사항은 무엇일까요? 모든 방정식의 양쪽에 동일한 작업을 할 것이기 때문에 --

67
00:09:07,000 --> 00:09:16,000
b 성분의 동일한 조합은 0을 줘야 합니다.

68
00:09:16,000 --> 00:09:29,000
맞습니까? 그래서 행들의 조합이 0 행을 주면, b 항목들의 동일한 조합은

69
00:09:29,000 --> 00:09:37,000
0을 줘야 합니다.

70
00:09:37,000 --> 00:09:43,000
그리고 이것은 0 행이 아니라 0 숫자입니다.

71
00:09:43,000 --> 00:09:54,000
이것은 다른 방식으로 말하는 것인데 -- 그것은 즉시 명확하지 않습니다. 이 두 진술이 동등하다는 것이

72
00:09:54,000 --> 00:09:59,000
그러나 어쨌든 그들은 동등해야 합니다, 왜냐하면 둘 다 시스템의 해결 가능성과 동등하기 때문입니다.

73
00:09:59,000 --> 00:10:05,000
좋습니다. 그래서 우리는 이런 -- 질문 0과 같은 것을 얻었습니다,

74
00:10:05,000 --> 00:10:12,000
시스템이 해를 가지고 있나요? 좋습니다, 그것에 대해 더 논의하러 돌아오겠습니다.

75
00:10:12,000 --> 00:10:19,000
해가 있을 때 계속 나아갑시다. 해가 있을 때입니다.

76
00:10:19,000 --> 00:10:24,000
그래서 우리의 임무는 무엇일까요? 추상적으로 우리는 뒤로 물러나서 말합니다, 좋습니다, 해가

77
00:10:24,000 --> 00:10:34,000
있습니다, 끝났습니다. 존재합니다. 하지만 우리는 그것을 구성하고 싶습니다. 그래서 알고리즘, 순서는

78
00:10:34,000 --> 00:10:42,000
해를 찾기 위한 단계들은 무엇일까요? 그것이 제가 -- 그리고 물론 퀴즈와 기말고사에서,

79
00:10:42,000 --> 00:10:48,000
Ax=b 시스템을 줄 것이고 해가 있다면 해를 물어볼 것입니다.

80
00:10:48,000 --> 00:10:54,000
그래서 여러분이 따르고 싶은 알고리즘입니다.

81
00:10:54,000 --> 00:11:13,000
좋습니다, 봅시다. 그래서 무엇이 -- 이제 Ax=b의 완전한 해를 찾기 위해서입니다.

82
00:11:13,000 --> 00:11:19,000
좋습니다. 하나의 해, 하나의 특정 해를 찾는 것부터 시작하겠습니다.

83
00:11:19,000 --> 00:11:26,000
저는 그렇게 할 수 있을 것으로 예상합니다, 왜냐하면 제 방정식 시스템은

84
00:11:26,000 --> 00:11:33,000
이제 마지막 방정식이 0 = 0이므로 모든 것이 괜찮습니다.

85
00:11:33,000 --> 00:11:38,000
저는 사실상 두 개의 방정식을 가지고 있습니다 -- 사실 네 개의 미지수가 있으므로,

86
00:11:38,000 --> 00:11:44,000
해를 찾을 뿐만 아니라 많은 해를 찾을 것으로 예상합니다.

87
00:11:44,000 --> 00:11:50,000
하지만 하나만 찾아봅시다. 그래서 첫 번째 단계, 특정 해, x 특정(x particular)입니다.

88
00:11:50,000 --> 00:11:57,000
어떻게 하나의 특정 해를 찾을까요?

89
00:11:57,000 --> 00:12:02,000
음, 제가 어떻게 찾는지 알려드리겠습니다. 이것은 --

90
00:12:02,000 --> 00:12:10,000
해가 많이 있으므로, 특정 하나를 찾는 자신만의 방법이 있을 수 있습니다. 하지만 이것은 꽤 자연스러운 방법입니다.

91
00:12:10,000 --> 00:12:20,000
모든 자유 변수(free variables)를 0으로 설정합니다.

92
00:12:20,000 --> 00:12:28,000
자유 변수는 어떤 것이든 될 수 있는 변수이기 때문에, 가장 편리한 선택은 0입니다.

93
00:12:28,000 --> 00:12:37,000
그런 다음 피봇 변수(pivot variables)에 대해 Ax=b를 풉니다.

94
00:12:37,000 --> 00:12:44,000
그것이 이 예시에서 무엇을 의미할까요?

95
00:12:44,000 --> 00:12:49,000
자유 변수는 무엇일까요? 어떤 변수를 자유롭게 지정할 수 있으며

96
00:12:49,000 --> 00:12:55,000
그리고 피봇 변수를 찾는 방법은 단 하나뿐인가요?

97
00:12:55,000 --> 00:13:01,000
그것들은 x2와 -- 그래서 x2는 0입니다, 왜냐하면 그것은 피봇이 없는 열에 있기 때문입니다.

98
00:13:01,000 --> 00:13:08,000
두 번째 열에는 피봇이 없습니다. 그리고 -- 다른 하나는 무엇인가요?

99
00:13:08,000 --> 00:13:16,000
네 번째, x4는 0입니다. 왜냐하면 그것들이 자유 변수이기 때문입니다.

100
00:13:16,000 --> 00:13:28,000
그것들은 피봇이 없는 열에 있습니다. 그래서 제가 -- x2와 x4가 0일 때, 남는 것은 --

101
00:13:28,000 --> 00:13:36,000
여기서 무엇이 남았나요? 저는 단지 -- 이제 두 개의 자유 열을 사용하지 않습니다.

102
00:13:36,000 --> 00:13:42,000
저는 피봇 열만 사용하고 있습니다. 그래서 실제로는 x1 --

103
00:13:42,000 --> 00:13:48,000
첫 번째 방정식은 x1과 두 개의 x3가 오른쪽 항이 되어야 합니다. 우리가 1로 선택했습니다.

104
00:13:48,000 --> 00:13:54,000
그리고 두 번째 방정식은 두 개의 x3가 되었습니다,

105
00:13:54,000 --> 00:14:02,000
결과적으로, 3이 되었습니다.

106
00:14:02,000 --> 00:14:09,000
x2와 x4를 0으로 설정했으므로 여기에 다시 적어봅니다.

107
00:14:09,000 --> 00:14:16,000
그리고 여러분은 우리가 역대입법(back substitution)이 작동하는 일반적인 경우로 돌아왔다는 것을 볼 수 있습니다.

108
00:14:16,000 --> 00:14:21,000
그래서 x3는 3/2이고, 그런 다음 위로 올라가서

109
00:14:21,000 --> 00:14:29,000
x1은 1 빼기 2x3입니다. 그것은 아마 -2일 것입니다.

110
00:14:29,000 --> 00:14:41,000
좋습니다. 이제 우리는 해, x 특정은 벡터 -2 0 3/2 0을 얻었습니다.

111
00:14:41,000 --> 00:14:52,000
좋습니다. 그것은 하나의 특정 해이며, 우리는 원래 시스템에

112
00:14:52,000 --> 00:14:59,000
대입할 수 있고 해야 합니다. 정말로 -- 퀴즈에서는 이것을 해보는 것이 좋습니다.

113
00:14:59,000 --> 00:15:06,000
그래서 우리는 이 모든 행 연산을 수행했지만, 이것은 원래 시스템을 풀어야 합니다,

114
00:15:06,000 --> 00:15:14,000
그리고 저는 그렇게 한다고 생각합니다. 좋습니다. 그래서 우리가 얻은 것이 x 특정입니다.

115
00:15:14,000 --> 00:15:23,000
그래서 그것이 오늘 새로운 것입니다. 특정 해는 -- 먼저 마지막 방정식에서 0 = 0인지 확인하여 괜찮다는 것을 확인합니다.

116
00:15:23,000 --> 00:15:38,000
그런 다음 자유 변수를 0으로 설정하고, 피봇 변수를 풀면 특정 해, 자유 변수가 0인 특정 해를 얻습니다.

117
00:15:38,000 --> 00:15:45,000
좋습니다. 이제 -- 하지만 그것은 하나의 해일 뿐이고, 이제 모든 해를 찾고 있습니다.

118
00:15:45,000 --> 00:15:51,000
그래서 나머지를 어떻게 찾을까요?

119
00:15:51,000 --> 00:15:58,000
핵심은 영공간(null space)에서 x를 추가할 수 있다는 것입니다.

120
00:15:58,000 --> 00:16:06,000
우리는 영공간의 벡터를 찾는 방법을 알고 있습니다 --

121
00:16:06,000 --> 00:16:12,000
지난 시간에 했지만, 우리가 얻은 것을 상기시켜 드리겠습니다. 그리고 나서 추가하겠습니다.

122
00:16:12,000 --> 00:16:20,000
그래서 최종 결과는 완전한 해 --

123
00:16:20,000 --> 00:16:27,000
이것이 이제 완전한 해입니다 -- 완전한 해는 이 하나의 특정 해

124
00:16:27,000 --> 00:16:34,000
더하기 모든, 영공간에서 나온 모든 다른 벡터입니다.

125
00:16:34,000 --> 00:16:42,000
xn, 좋습니다. 왜 이런 패턴인가요? 이 패턴은 선형 방정식이 있는 모든 곳에서 나타나기 때문에

126
00:16:42,000 --> 00:16:48,000
수학 전체에 걸쳐 나타납니다.

127
00:16:48,000 --> 00:17:01,000
여기에 이유를 적어보겠습니다. Axp, 그래서 그것은 x 특정이고, Ax 특정은 무엇을 줍니까?

128
00:17:01,000 --> 00:17:10,000
그것은 올바른 오른쪽 항 b를 줍니다. 그리고 영공간에 있는 x에 A를 곱하면 무엇을 줍니까?

129
00:17:10,000 --> 00:17:17,000
0입니다. 그래서 저는 더하고, 괄호를 넣습니다.

130
00:17:17,000 --> 00:17:25,000
그래서 xp 더하기 xn은 b 더하기 0이고, 그것은 b입니다.

131
00:17:25,000 --> 00:17:30,000
그래서 -- 제가 무슨 말을 하고 있나요? 그냥 말로 표현해 보겠습니다.

132
00:17:30,000 --> 00:17:36,000
만약 하나의 해가 있다면, 영공간에 있는 어떤 것이든

133
00:17:36,000 --> 00:17:43,000
추가할 수 있습니다. 왜냐하면 영공간에 있는 것은 오른쪽 항이 0이고, 저는 여전히

134
00:17:43,000 --> 00:17:50,000
올바른 오른쪽 항 B를 가지고 있기 때문입니다. 그래서 그것이 저의 시스템입니다. 그것이 저의 완전한 해입니다.

135
00:17:50,000 --> 00:18:02,000
이제 이 예시에 대해 어떻게 될지 작성해 보겠습니다. 이 예시에서 x 일반(x general), x 완전(x complete),

136
00:18:02,000 --> 00:18:07,000
완전한 해는 x 특정(x particular)입니다,

137
00:18:07,000 --> 00:18:15,000
즉 -2 0 3/2 0이고, 자유 변수에 0이 있으며, 더하기 --

138
00:18:15,000 --> 00:18:21,000
여러분은 영공간에 자유 변수에 1이 있는 특수 해가 있었다는 것을 기억하시죠 --

139
00:18:21,000 --> 00:18:29,000
또는 자유 변수에 1과 0이 있고, 그런 다음 채워 넣어서 찾았는데 저는 그것들이 무엇이었는지 잊었습니다,

140
00:18:29,000 --> 00:18:36,000
하지만 아마도 그것이었을 것입니다. 나머지는요? 그것은 특수 해였고, 그리고 다른 특수 해가 있었는데

141
00:18:36,000 --> 00:18:46,000
그 자유 변수는 0이고 이 자유 변수는 1이었습니다, 그리고 저는 그것들을 채워 넣어야 합니다.

142
00:18:46,000 --> 00:18:51,000
어떻게 채워지는지 기억할 수 있을까요? 아마도 이것은 -2였고 이것은 2였을 것입니다,

143
00:18:51,000 --> 00:18:57,000
아마도? 아마 맞을 것 같습니다.

144
00:18:57,000 --> 00:19:05,000
저는 -- 네. 여러분에게 맞아 보이나요?

145
00:19:05,000 --> 00:19:11,000
제 방정식이 무엇인지 기억해야 합니다. 저 뒤에 있는 보드로 돌아가는 대신에,

146
00:19:11,000 --> 00:19:19,000
첫 번째 방정식이 2x3 + 2x4 = 0이었다고 기억해 봅시다,

147
00:19:19,000 --> 00:19:28,000
왜냐하면 영공간에 있는 변수들을 찾고 있기 때문입니다. 그래서 x4를 1로 설정하고 두 번째 방정식은,

148
00:19:28,000 --> 00:19:35,000
제가 다시 복사하지 않았지만, 이것에 대해 -2를 주었고 그런 다음 -- 네, 그것이 맞는 것 같습니다.

149
00:19:35,000 --> 00:19:40,000
2 - 4 + 2는 0입니다, 확인됩니다.

150
00:19:40,000 --> 00:19:46,000
좋습니다. 그것들이 특수 해였습니다. 완전한 해를 얻기 위해 우리는 무엇을 합니까?

151
00:19:46,000 --> 00:19:52,000
이제 완전한 해를 어떻게 얻을까요?

152
00:19:52,000 --> 00:19:58,000
저는 이것에 어떤 것, c1이라고 하겠습니다, 을 곱하고 이것에 어떤 것이든 곱합니다 --

153
00:19:58,000 --> 00:20:04,000
저는 어떤 조합이든 취합니다. 그것이 영공간을 어떻게 설명했는지 기억하시나요?

154
00:20:04,000 --> 00:20:10,000
영공간은 모든 조합으로 구성됩니다 -- 그래서 이것이 xn입니다 --

155
00:20:10,000 --> 00:20:18,000
특수 해의 모든 조합입니다. 두 개의 자유 변수가 있었기 때문에 두 개의 특수 해가 있었습니다.

156
00:20:18,000 --> 00:20:24,000
그리고 우리는 그 수를 세고 싶습니다 --

157
00:20:24,000 --> 00:20:30,000
지금은 신중하게요. 여기 있는 동안, 그것이 -- 그것이 제가 찾고 있는 종류의 답입니다.

158
00:20:30,000 --> 00:20:38,000
이 녀석을 곱하는 상수가 있나요? x 특정에 곱해지는 자유 상수가 있나요?

159
00:20:38,000 --> 00:20:44,000
절대 아닙니다. 맞죠? x 특정은 Axp=b를 해결합니다.

160
00:20:44,000 --> 00:20:51,000
저는 그것을 3배로 곱할 수 없습니다. 하지만 Axn, 저는 xn을 3배로 곱할 수 있습니다,

161
00:20:51,000 --> 00:20:56,000
또는 다른 xn에 추가할 수 있습니다, 왜냐하면 오른쪽에서 계속 0을 얻기 때문입니다.

162
00:20:56,000 --> 00:21:02,000
좋습니다. 다시, xp는 하나의 특정 변수입니다.

163
00:21:02,000 --> 00:21:09,000
xn은 전체 부분공간(subspace)입니다. 맞죠? 이것은 하나의 변수에 부분공간의 어떤 것이든 더한 것입니다.

164
00:21:09,000 --> 00:21:14,000
그려 볼게요. 한번 시도해 볼게요 -- 오.

165
00:21:14,000 --> 00:21:19,000
그리고 싶습니다, 이 모든 것을 그래프로 그리고 싶습니다 --

166
00:21:19,000 --> 00:21:25,000
저는 모든 해를 그리고 싶습니다.

167
00:21:25,000 --> 00:21:32,000
이제 x. 그래서 제가 어떤 차원에 있죠?

168
00:21:32,000 --> 00:21:38,000
이것은 불행한 점입니다. x는 몇 개의 구성 요소를 가지고 있나요?

169
00:21:38,000 --> 00:21:47,000
4개입니다. 4개의 미지수가 있습니다. 그래서 저는 이 MIT의

170
00:21:47,000 --> 00:21:58,000
싸구려 칠판에 4차원 그림을 그려야 합니다. 좋습니다. 시작해 봅시다. x1 -- 아인슈타인은 할 수 있었겠지만, 이것은 --

171
00:21:58,000 --> 00:22:06,000
이것들은 4차원 공간을 나타내는 4개의 수직 축입니다.

172
00:22:06,000 --> 00:22:12,000
4차원 공간을 나타냅니다. 좋습니다. 저의 해들은 어디에 있나요?

173
00:22:12,000 --> 00:22:20,000
제 해들이 부분공간을 형성하나요? Ax=b의 해의 집합이 부분공간을 형성합니까?

174
00:22:20,000 --> 00:22:26,000
절대 아닙니다. 그러나 실제로는 어떻게 생겼을까요? 부분공간은 이 그림에 있습니다.

175
00:22:26,000 --> 00:22:33,000
이 부분은 부분공간입니다, 맞죠? 그 부분은 어떤, 2차원 같은 것입니다,

176
00:22:33,000 --> 00:22:41,000
왜냐하면 두 개의 매개변수가 있기 때문에, 그것은 -- 저는 이 영공간을 R^4 내부의 2차원 부분공간으로 생각하고 있습니다.

177
00:22:41,000 --> 00:22:46,000
이제 저는 여러분에게 말씀드리고 다음 시간에 말씀드릴 것입니다,

178
00:22:46,000 --> 00:22:52,000
부분공간이라는 것이 무엇을 의미하는지, 부분공간의 차원은 무엇인지요. 하지만 여러분은 그것이 무엇이 될지 볼 수 있습니다.

179
00:22:52,000 --> 00:22:58,000
그것은 우리가 선택할 수 있는 자유로운 독립 상수의 수입니다.

180
00:22:58,000 --> 00:23:03,000
그래서 어떻게든 2차원 부분공간이 있을 것입니다, 선이 아니고,

181
00:23:03,000 --> 00:23:10,000
3차원 평면도 아니지만, 단지 2차원 녀석입니다.

182
00:23:10,000 --> 00:23:15,000
하지만 그것은 원점을 통과하지 않습니다 왜냐하면 이 점을 통과하기 때문입니다.

183
00:23:15,000 --> 00:23:21,000
그래서 여기에 x 특정이 있습니다. x 특정은 여기 어딘가에 있습니다. x 특정.

184
00:23:21,000 --> 00:23:28,000
그래서 그것은 어떻게든 부분공간입니다 -- 그런 식으로 그려볼 수 있을까요?

185
00:23:28,000 --> 00:23:36,000
그것은 x 특정을 통과하는 2차원 부분공간입니다.

186
00:23:36,000 --> 00:23:44,000
그리고 나서 -- 그래서 x 특정이 있고, 저는 xn을 추가했고, 그리고 x가 있습니다.

187
00:23:44,000 --> 00:23:51,000
x=xp+xn이 있습니다. 하지만 xn은 이 부분공간 어디에나 있었습니다,

188
00:23:51,000 --> 00:23:56,000
그래서 그것은 평면을 채웠습니다.

189
00:23:56,000 --> 00:24:02,000
그것은 부분공간입니다 -- 그것은 부분공간이 아닙니다, 제가 무슨 말을 하고 있죠?

190
00:24:02,000 --> 00:24:08,000
그것은 평평한 것과 같습니다, 부분공간과 같지만, 원점에서 이동되었습니다.

191
00:24:08,000 --> 00:24:16,000
그것은 0을 포함하지 않습니다. 감사합니다. 좋습니다. 그것이 그림이고, 그것이 알고리즘입니다.

192
00:24:16,000 --> 00:24:25,000
그래서 알고리즘은 단지 소거법을 통과하고, 특정 해를 찾고,

193
00:24:25,000 --> 00:24:34,000
그런 다음 그 특수 해들을 찾는 것입니다. 여러분은 그것을 할 수 있습니다. 강의에서 시간을 좀 내어

194
00:24:34,000 --> 00:24:43,000
큰 그림에 대해 생각해 봅시다. 그래서 생각해 봅시다 --

195
00:24:43,000 --> 00:24:54,000
이것이 제 패턴입니다. 이제 생각하고 싶습니다 -- 질문에 대해 여러분에게 물어보고 싶습니다 --

196
00:24:54,000 --> 00:25:01,000
여러분에게 몇 가지 질문을 하고 싶습니다. 제가 더 크게 생각한다는 것은 랭크(rank)가 r인 m

197
00:25:01,000 --> 00:25:09,000
× n 행렬 A에 대해 생각한다는 의미입니다.

198
00:25:09,000 --> 00:25:15,000
좋습니다.

199
00:25:15,000 --> 00:25:22,000
랭크의 정의는 무엇인가요? 우리의 현재 랭크 정의는 피봇의 수입니다.

200
00:25:22,000 --> 00:25:31,000
좋습니다. 우선, 이 숫자들은 어떻게 관련되어 있나요? r과 m 사이의 관계를 말해 줄 수 있나요?

201
00:25:31,000 --> 00:25:42,000
만약 행렬에 m개의 행이 있고 r개의 피봇이 있다면, -- 그러면 확실히 항상 알고 있습니다 --

202
00:25:42,000 --> 00:25:49,000
r과 m 사이에 어떤 관계를 알고 있나요? r은 작거나 같습니다, 맞죠?

203
00:25:49,000 --> 00:25:56,000
왜냐하면 m개의 행이 있으므로, m개보다 더 많은 피봇을 가질 수 없고, m개를 가질 수도 있고 더 적을 수도 있습니다.

204
00:25:56,000 --> 00:26:01,000
또한, n개의 열이 있습니다.

205
00:26:01,000 --> 00:26:10,000
그래서 r과 n 사이의 관계는 무엇인가요? 동일하게, 작거나 같습니다, 왜냐하면 열은

206
00:26:10,000 --> 00:26:17,000
하나 이상의 피봇을 가질 수 없기 때문입니다. 그래서 전체적으로 n개보다 더 많은 피봇을 가질 수 없습니다.

207
00:26:17,000 --> 00:26:25,000
좋습니다, 좋습니다. 그래서 저는 랭크가 r인 m × n 행렬을 가지고 있습니다. 그리고 항상 r ≤ m, r ≤ n임을 알고 있습니다.

208
00:26:25,000 --> 00:26:35,000
이제 저는 랭크가 가능한 한 크게 되는 경우인 완전 랭크(full rank)에 특히 관심이 있습니다.

209
00:26:35,000 --> 00:26:40,000
음, 여기에 m과 n이라는 이 숫자들이 무엇인지에 따라 두 가지 별도의 가능성이 있다고 생각합니다.

210
00:26:40,000 --> 00:26:49,000
그래서 완전 열 랭크(full column rank)의 경우에 대해 이야기해 봅시다.

211
00:26:49,000 --> 00:27:02,000
그리고 그것은 r=n을 의미합니다.

212
00:27:02,000 --> 00:27:11,000
그리고 그것이 우리의 해에 대해 무엇을 의미하는지 묻고 싶습니다.

213
00:27:11,000 --> 00:27:21,000
그것이 영공간에 대해 무엇을 말해주나요? 그것이 완전한 해에 대해 무엇을 말해주나요?

214
00:27:21,000 --> 00:27:28,000
좋습니다, 그래서 그것은 무엇을 의미하나요? 그래서 여러분에게 묻고 싶습니다, 좋습니다, 랭크가

215
00:27:28,000 --> 00:27:35,000
n이라면, 그것은 무엇을 의미하나요? 모든 열에 피봇이 있다는 것을 의미합니다.

216
00:27:35,000 --> 00:27:41,000
그래서 피봇 변수는 몇 개인가요? n개입니다.

217
00:27:41,000 --> 00:27:48,000
이 경우에는 모든 열에 피봇이 있습니다. 그래서 자유 변수는 몇 개인가요?

218
00:27:48,000 --> 00:27:54,000
전혀 없습니다. 자유 변수가 없습니다. r=n, 자유 변수가 없습니다.

219
00:27:54,000 --> 00:28:00,000
그래서 그것은 우리의 작은 알고리즘에서 무엇이

220
00:28:00,000 --> 00:28:07,000
일어날 것인지 우리에게 무엇을 말해주나요? 영공간에는 무엇이 있을까요?

221
00:28:07,000 --> 00:28:13,000
A의 영공간에는 무엇이 들어있나요?

222
00:28:13,000 --> 00:28:20,000
0 벡터만 있습니다. 다른 값을 줄 자유 변수가 없습니다.

223
00:28:20,000 --> 00:28:29,000
그래서 영공간에는 0 벡터만 있습니다.

224
00:28:29,000 --> 00:28:38,000
그리고 Ax=b의 해는 어떤가요? Ax=b의 해는?

225
00:28:38,000 --> 00:28:43,000
그것에 대한 이야기는 무엇인가요? 그래서 이제 그것은 오늘의 강의에서 나온 것입니다.

226
00:28:43,000 --> 00:28:45,500
해 x는 --

227
00:28:51,000 --> 00:28:59,000
완전한 해는 무엇인가요? 그것은 x 특정일 뿐입니다, 맞죠?

228
00:28:59,000 --> 00:29:05,000
만약, 만약, 만약 x가 있다면, 해가 있다면. 그것은 x는 x 특정과 같습니다.

229
00:29:05,000 --> 00:29:11,000
아무것도 없습니다 -- 알다시피, 단 하나의 해만 있습니다. 만약 해가 있다면.

230
00:29:11,000 --> 00:29:16,000
그래서 그것은 유일한 해입니다 -- 유일하다는 것은 오직 하나만 있다는 의미입니다 --

231
00:29:16,000 --> 00:29:22,000
만약 존재한다면, 만약 존재한다면 유일한 해입니다.

232
00:29:22,000 --> 00:29:29,000
다시 말해, 저는 말하고 싶습니다 -- 다른 방식으로 표현해 보겠습니다.

233
00:29:29,000 --> 00:29:38,000
0개 또는 1개의 해가 있습니다.

234
00:29:38,000 --> 00:29:45,000
이것은 모두 r=n인 경우입니다.

235
00:29:45,000 --> 00:29:50,000
그래서 저는 -- 왜냐하면 많은, 많은 실제 응용에서,

236
00:29:50,000 --> 00:29:55,000
열들은 나중에 독립(independent)이라고 부를 것입니다.

237
00:29:55,000 --> 00:30:04,000
그리고 우리는 영공간에서 찾을 것이 없을 것이고,

238
00:30:04,000 --> 00:30:09,000
그리고 우리는 특정 해만 가질 것입니다. 좋습니다.

239
00:30:09,000 --> 00:30:15,000
모두 그 가능성을 이해하시나요? 하지만 예시가 필요합니다, 맞죠?

240
00:30:15,000 --> 00:30:23,000
그래서 예시를 만들어 보겠습니다. 어떤 종류의 행렬이 -- 완전 열 랭크를 가지는 행렬의 모양은 어떤가요?

241
00:30:23,000 --> 00:30:30,000
그래서 여기에 예시를 넣을 수 있을까요?

242
00:30:30,000 --> 00:30:38,000
만약 존재한다면. 예시를 넣어 보겠습니다, 그리고 그것은 예시를 넣기에 딱 맞는 공간입니다.

243
00:30:38,000 --> 00:30:45,000
왜냐하면 예시는 가늘고 긴 모양일 것이기 때문입니다.

244
00:30:45,000 --> 00:30:54,000
그것은 -- 음, 여기 예시가 있습니다, 1 2, 6 5, 3 1,

245
00:30:54,000 --> 00:31:06,000
1 1. 훌륭한 예시입니다. 좋습니다. 그래서 행렬 A가 있고, 그것의 랭크는 무엇인가요?

246
00:31:06,000 --> 00:31:12,000
그 행렬의 랭크는 무엇인가요? 소거법을 수행하면 몇 개의 피봇을 찾을까요?

247
00:31:12,000 --> 00:31:20,000
2개, 맞죠? 2개. 저는 여기에 피봇이 있는 것을 봅니다 --

248
00:31:20,000 --> 00:31:26,000
오 확실히 이 두 열은 다른 방향으로 향하고 있습니다.

249
00:31:26,000 --> 00:31:35,000
소거법을 수행하면, 확실히 여기에 다른 피봇을 얻을 것이고, 괜찮습니다, 그리고 그것들을 사용하여 아래와 위를 정리할 수 있습니다.

250
00:31:35,000 --> 00:31:43,000
그래서 -- 실제로, 그것의 행 축소된 행 사다리꼴(row reduced row echelon)

251
00:31:43,000 --> 00:31:49,000
형태는 무엇일까요? 그 소거법 과정을 끝까지 수행할 수 있나요?

252
00:31:49,000 --> 00:31:54,000
그래서 그것은 무엇을, 무엇을 의미하나요?

253
00:31:54,000 --> 00:32:00,000
저는 이 행의 배수를 이 행들에서 뺍니다. 그래서 모두 0으로 정리합니다.

254
00:32:00,000 --> 00:32:07,000
그런 다음 여기에 어떤 피봇이 있습니다. 그것으로 무엇을 하나요? 아래와 위에서 뺀 다음,

255
00:32:07,000 --> 00:32:14,000
나누고, 그 예시에 대한 R은 무엇인가요? 아마도 저는 -- 여러분이 다음 보드에 넣는 것을 허락해 주실 겁니다.

256
00:32:14,000 --> 00:32:21,000
연습 삼아, 그 행렬에 대한 행 축소된 사다리꼴 형태는 무엇인가요?

257
00:32:21,000 --> 00:32:28,000
피봇에 1이 있습니다.

258
00:32:28,000 --> 00:32:34,000
항등 행렬이 있습니다, 작은 2×2 항등 행렬이 있고, 그 아래에는 모두 0입니다.

259
00:32:34,000 --> 00:32:43,000
그것은 정말로 두 개의 독립적인 행을 가진 행렬입니다,

260
00:32:43,000 --> 00:32:49,000
그리고 실제로 첫 번째 두 행입니다. 첫 번째 두 행은 독립적입니다. 그들은 같은 방향에 있지 않습니다.

261
00:32:49,000 --> 00:32:55,000
하지만 다른 행들은 첫 번째 두 행의 조합이므로 --

262
00:32:55,000 --> 00:33:02,000
Ax=b에 항상 해가 있나요? 여기서 그림은 어떻게 되나요?

263
00:33:02,000 --> 00:33:11,000
이 행렬 A에 대해, 이것은 완전 열 랭크의 경우입니다. 두 열은 -- 두 개의 피봇을 줍니다.

264
00:33:11,000 --> 00:33:19,000
영공간에는 아무것도 없습니다. 0 열을 주는 이 열들의 조합은 0 0 조합을 제외하고는 없습니다.

265
00:33:19,000 --> 00:33:25,000
그래서 영공간에는 아무것도 없습니다.

266
00:33:25,000 --> 00:33:31,000
하지만 AX=B에 항상 해가 있나요? AX=B는 어떤가요?

267
00:33:31,000 --> 00:33:38,000
저는 네 개의, 네 개의 방정식이 있고, 오직 두 개의 X만 있습니다.

268
00:33:38,000 --> 00:33:45,000
그래서 답은 확실히 아닙니다. 항상 해가 있는 것은 아닙니다.

269
00:33:45,000 --> 00:33:51,000
0개의 해가 있을 수 있고, 무작위로 선택하면 0개의 해가 있을 것입니다.

270
00:33:51,000 --> 00:33:59,000
또는 오른쪽 항에 대한 훌륭한 특정 선택을 한다면, 이 두 변수의 조합일 때

271
00:33:59,000 --> 00:34:07,000
-- 해가 있는 오른쪽 항 하나를 말해 주세요. 해가 있는 오른쪽 항을 말해 주세요.

272
00:34:07,000 --> 00:34:12,000
음, 0 0 0 0, 좋습니다. 그것에 대한 상을 드리지 않겠습니다.

273
00:34:12,000 --> 00:34:18,000
또 다른 하나를 말해 주세요. 해가 있는 다른 오른쪽 항은 4 3 7 6일 것입니다.

274
00:34:18,000 --> 00:34:25,000
저는 두 열을 더할 수 있습니다. 오른쪽 항이 4 3 7 6이었다면

275
00:34:25,000 --> 00:34:31,000
맞죠? 완전한 해는 무엇일까요? 특정 해 1

276
00:34:31,000 --> 00:34:39,000
1, 그 열의, 하나 더하기 저것의 하나가 있을 것이고, 그것이 유일한 해일 것입니다. 그래서 있을 것입니다 -- x 특정은 1 1

277
00:34:39,000 --> 00:34:46,000
오른쪽 항이 두 열의 합인 경우, 그리고 그것이 전부입니다.

278
00:34:46,000 --> 00:34:55,000
그래서 그것은 하나의 해가 있는 경우일 것입니다. 좋습니다. 이것이 완전 열 랭크의 전형적인 설정입니다.

279
00:34:55,000 --> 00:35:04,000
이제 완전 행 랭크(full row rank)로 넘어갑니다. 여러분은 이 논의의 자연스러운 대칭성을 볼 수 있습니다.

280
00:35:04,000 --> 00:35:14,000
완전 행 랭크는 r=m을 의미합니다.

281
00:35:14,000 --> 00:35:19,000
그래서 이제 제가 관심 있는 것은 r=m입니다.

282
00:35:19,000 --> 00:35:29,000
좋습니다, 그것은 어떤 의미인가요?

283
00:35:29,000 --> 00:35:40,000
피봇은 몇 개인가요? m개입니다. 그래서 이 경우에 소거법을 수행하면 어떻게 될까요?

284
00:35:40,000 --> 00:35:47,000
m개의 피봇을 얻게 됩니다. 그래서 모든 행에 피봇이 있습니다, 맞죠?

285
00:35:47,000 --> 00:35:55,000
모든 행에 피봇이 있습니다. 그러면 해결 가능성은 어떤가요?

286
00:35:55,000 --> 00:36:01,000
이 문제에 대해서는 -- 어떤 오른쪽 항에 대해 해결할 수 있을까요?

287
00:36:01,000 --> 00:36:14,000
그것이 제 질문입니다. 어떤 오른쪽 항에 대해 Ax=b를 해결할 수 있을까요?

288
00:36:14,000 --> 00:36:23,000
무엇이 오는지 보이시나요? 소거법을 수행하면 0인 행이 생기지 않습니다.

289
00:36:23,000 --> 00:36:36,000
그래서 b에 대한 요구 사항이 없습니다. 모든 b에 대해 Ax=b를 해결할 수 있습니다.

290
00:36:36,000 --> 00:36:46,000
모든 오른쪽 항에 대해 Ax=b를 해결할 수 있습니다. 이것이 존재성입니다, 해가 존재합니다.

291
00:36:46,000 --> 00:36:57,000
이제 말해 보세요, 그래서, 모든 행에 피봇이 있습니다.

292
00:36:57,000 --> 00:37:04,000
그래서 자유 변수는 몇 개인가요? 이 경우에 자유 변수는 몇 개인가요?

293
00:37:04,000 --> 00:37:11,000
처음에 n개의 변수가 있었다면, 피봇 변수로 몇 개가 사용되나요?

294
00:37:11,000 --> 00:37:31,000
r개, 즉 m개입니다. 그래서 n-r개의 자유 변수가 남습니다.

295
00:37:31,000 --> 00:37:37,000
좋습니다. 그래서 완전 행 랭크의 경우 항상 해결할 수 있고,

296
00:37:37,000 --> 00:37:43,000
그리고 이것은 몇 개의 변수가 자유인지 알려주고, 이것은 물론 n-m입니다.

297
00:37:43,000 --> 00:37:48,000
n-m개의 자유 변수가 있습니다. 예시를 들어볼까요?

298
00:37:48,000 --> 00:37:54,000
알다시피, 제가 예시를 들 수 있는 가장 좋은 방법은

299
00:37:54,000 --> 00:38:01,000
그 예시를 전치(transpose)하는 것입니다. 그래서 열 1 2 6 5가 있는 그 행렬을 가져와서 행으로 만들어 봅시다.

300
00:38:01,000 --> 00:38:11,000
그리고 3 1 1 1을 두 번째 행으로 만들어 봅시다.

301
00:38:11,000 --> 00:38:18,000
그리고 물어봅시다, 이것이 제 행렬 A인데, 랭크는 무엇인가요?

302
00:38:18,000 --> 00:38:24,000
그 행렬의 랭크는 무엇인가요? 물어봐서 죄송하지만, 사실 죄송하지 않습니다,

303
00:38:24,000 --> 00:38:29,000
왜냐하면 우리는 랭크의 개념을 이해하고 있기 때문입니다. 그 행렬의 랭크는 무엇인가요?

304
00:38:29,000 --> 00:38:36,000
2, 정확히, 2입니다. 2개의 피봇이 있을 것입니다. 행 축소된 사다리꼴 형태는 무엇이 될까요?

305
00:38:36,000 --> 00:38:42,000
누군가 그것을 알고 있나요? 사실, 말해 주세요 -- 여러분은 단지

306
00:38:42,000 --> 00:38:50,000
2개의 피봇이 있을 것이라는 것만 말하는 것이 아니라 어떤 것이 피봇 열이 될 것인지 말해야 합니다. 이 행렬의 어떤 열이 피봇 열이 될까요?

307
00:38:50,000 --> 00:38:55,000
첫 번째 열은 괜찮고, 그런 다음 다음 열로 넘어가면 무엇을 얻을까요?

308
00:38:55,000 --> 00:39:01,000
이 위치에서 두 번째 피봇을 얻을까요? 네.

309
00:39:01,000 --> 00:39:07,000
그래서 피봇들은, R까지 가면, 거기에 있을 것입니다.

310
00:39:07,000 --> 00:39:13,000
그리고 여기에는 몇 개의 숫자가 있을 것입니다.

311
00:39:13,000 --> 00:39:23,000
이것은 제가 이전에 F라고 부른 부분입니다. 이것은 -- R의 피봇 열은

312
00:39:23,000 --> 00:39:31,000
항등 행렬이 될 것입니다. 0인 행은 없습니다, 0인 행은 없습니다, 왜냐하면 랭크가 2이기 때문입니다.

313
00:39:31,000 --> 00:39:42,000
하지만 여기에 뭔가가 있을 것입니다. 그리고 그것이 특수 해와 영공간에 들어갈 것입니다.

314
00:39:42,000 --> 00:39:51,000
좋습니다. 그래서 이것은 r=m이 n보다 작은 전형적인 행렬입니다.

315
00:39:51,000 --> 00:40:01,000
이제 마지막으로 r=m=n인 경우에 대한 공간이 있습니다.

316
00:40:01,000 --> 00:40:08,000
여기서 가장 중요한 경우를 다루고 있습니다. 그래서 이 행렬은 어떤가요?

317
00:40:08,000 --> 00:40:15,000
예시를 들어 봅시다. 좋습니다, 훌륭한 예시, 1 2, 3 1입니다.

318
00:40:15,000 --> 00:40:23,000
말해 주세요 -- 랭크가

319
00:40:23,000 --> 00:40:32,000
r=m=n인 행렬을 어떻게 설명할까요? 그래서 행렬은 정사각형입니다, 맞죠, 정사각 행렬입니다.

320
00:40:32,000 --> 00:40:39,000
그리고 랭크가 -- 이제 완전 랭크입니다. 완전 열 랭크나 완전 행 랭크라고 말할 필요가 없습니다 --

321
00:40:39,000 --> 00:40:47,000
그냥 완전 랭크라고 말합니다, 왜냐하면 열의 수와 행의 수가 같고, 랭크는

322
00:40:47,000 --> 00:40:53,000
가능한 한 크기 때문입니다. 그리고 어떤 종류의 행렬을 가지고 있나요?

323
00:40:53,000 --> 00:41:01,000
가역(invertible) 행렬입니다. 그래서 그것이 정확히 가역 행렬입니다.

324
00:41:01,000 --> 00:41:10,000
r=m=n은 -- 가역 행렬의 행 사다리꼴 형태, 축소된 행 사다리꼴 형태는 무엇인가요?

325
00:41:10,000 --> 00:41:17,000
정사각형이고, 좋고, 정사각형이고, 가역 행렬인 경우에는? I입니다.

326
00:41:17,000 --> 00:41:25,000
맞습니다. 그래서 여러분은 좋은 행렬들이

327
00:41:25,000 --> 00:41:31,000
R에서 사소하게 나오는 것들임을 알 수 있습니다.

328
00:41:31,000 --> 00:41:37,000
그것들을 모두 항등 행렬로 축소합니다. 이 행렬의 영공간은 무엇인가요?

329
00:41:37,000 --> 00:41:43,000
계속해서 질문을 해도 될까요? 이 행렬의 영공간은 무엇인가요?

330
00:41:43,000 --> 00:41:51,000
그 행렬의 영공간은 0 벡터뿐입니다.

331
00:41:51,000 --> 00:41:58,000
0 벡터뿐입니다. Ax=b를 해결하기 위한 조건은 무엇인가요?

332
00:41:58,000 --> 00:42:07,000
어떤 오른쪽 항 b가 괜찮을까요? 이 예시에 대해 Ax=b를 해결하고 싶다면, A는 이것이고,

333
00:42:07,000 --> 00:42:14,000
b는 b1 b2입니다, b1과 b2에 대한 조건은 무엇인가요?

334
00:42:14,000 --> 00:42:21,000
전혀 없습니다, 맞죠. 그래서 이것이 그 경우입니다, 이것이 해결할 수 있는 경우입니다 --

335
00:42:21,000 --> 00:42:28,000
그래서 여기로 돌아오면, 저는 -- 랭크가 m과 같기 때문에, 모든 b에 대해 해결할 수 있습니다.

336
00:42:28,000 --> 00:42:33,000
그리고 랭크가 n과도 같기 때문에, 유일한 해가 있습니다.

337
00:42:33,000 --> 00:42:39,000
여기서 전체 그림을 요약해 보겠습니다.

338
00:42:39,000 --> 00:42:44,000
여기 전체 그림이 있습니다. r=m=n일 수 있습니다.

339
00:42:44,000 --> 00:42:51,000
이것은 이것이 항등 행렬인 경우입니다.

340
00:42:51,000 --> 00:42:56,000
그리고 이것은 하나의 해가 있는 경우입니다.

341
00:42:56,000 --> 00:43:02,000
그것이 정사각형 가역 2장의 경우입니다.

342
00:43:02,000 --> 00:43:08,000
이제 우리는 3장으로 넘어갑니다. r=m이 n보다 작을 수 있습니다.

343
00:43:08,000 --> 00:43:13,000
이것이 저기 있던 것입니다,

344
00:43:13,000 --> 00:43:18,000
그리고 행 사다리꼴 형태는 일부 0인 행이 있는 항등 행렬처럼 보였습니다.

345
00:43:18,000 --> 00:43:27,000
그리고 그것은 0개 또는 1개의 해가 있는 경우였습니다.

346
00:43:27,000 --> 00:43:34,000
제가 해라고 할 때는 Ax=b의 해를 의미합니다.

347
00:43:34,000 --> 00:43:39,000
그래서 이 경우, 항상 하나가 있습니다.

348
00:43:39,000 --> 00:43:45,000
이 경우에는 0개 또는 1개가 있습니다. 그리고 이제 완전 열 랭크의 경우를 살펴봅시다,

349
00:43:45,000 --> 00:43:55,000
하지만 일부, 추가 행이 있습니다.

350
00:43:55,000 --> 00:44:04,000
그래서 이제 R은 -- 음, 항등 행렬 --

351
00:44:04,000 --> 00:44:15,000
항등 행렬과 F를 쓰고 싶지만, 그것이 반드시 맞는 것은 아닙니다.

352
00:44:15,000 --> 00:44:24,000
제가 -- 맞나요? 여기서 제대로 이해하고 있나요?

353
00:44:24,000 --> 00:44:33,000
오, 아닙니다! 이런! 이것은 R이 n과 같은 경우입니다, 열들, 열들이,

354
00:44:33,000 --> 00:44:38,000
괜찮습니다. 그것이 저 보드에 있던 경우입니다, r=n, 완전 열 랭크입니다.

355
00:44:38,000 --> 00:44:46,000
이제 m이 n보다 작고 추가 열이 있는 경우를 원합니다.

356
00:44:46,000 --> 00:44:52,000
좋습니다. 계속 진행합시다.

357
00:44:52,000 --> 00:44:57,000
그래서 이것은 이제 완전 행 랭크의 경우입니다,

358
00:44:57,000 --> 00:45:08,000
그리고 I F처럼 보이지만 피봇 열이 첫 번째 열이라고 확신할 수 없습니다.

359
00:45:08,000 --> 00:45:14,000
그래서 I와 F는 부분적으로 I에 섞여 있을 수 있습니다.

360
00:45:14,000 --> 00:45:23,000
그냥 그렇게 쓸 수 있을까요? 그래서 F는 부분적으로 I에 섞여 있을 수 있습니다

361
00:45:23,000 --> 00:45:31,000
첫 번째 열이 피봇 열이 아니었다면. 이제 이 경우에 해는 몇 개인가요?

362
00:45:31,000 --> 00:45:37,000
항상 해가 있습니다. 이것은 존재성의 경우입니다. 항상 해가 있습니다.

363
00:45:37,000 --> 00:45:45,000
우리는 0인 행을 얻지 않습니다. 여기에는 0인 행이 없습니다. 그래서 항상 하나 또는 무한히 많은 해가 있습니다.

364
00:45:45,000 --> 00:45:47,500
좋습니다.

365
00:45:53,000 --> 00:46:02,000
사실, 항상 무한한 수의 해가 있을 것 같습니다, 왜냐하면 우리는 항상 처리할 영공간이 있기 때문입니다.

366
00:46:02,000 --> 00:46:08,000
그리고 마지막 경우는 r이 m보다 작고 n보다 작은 경우입니다.

367
00:46:08,000 --> 00:46:14,000
좋습니다. 이제 그것은 R이 항등 행렬인 경우입니다

368
00:46:14,000 --> 00:46:19,000
일부 자유 변수가 있지만 일부 0인 행도 있습니다.

369
00:46:19,000 --> 00:46:29,000
그리고 그것은 해가 없는 경우입니다 -- 왜냐하면 일부 b에 대해 0 = 0을 얻지 못했기 때문에,

370
00:46:29,000 --> 00:46:37,000
또는 무한히 많은 해가 있습니다.

371
00:46:37,000 --> 00:46:44,000
좋습니다. 여러분은 -- 이 보드가 정말로 강의를 요약합니다,

372
00:46:44,000 --> 00:46:55,000
그리고 이 문장이 강의를 요약합니다. 랭크는 해의 수에 대한 모든 것을 알려줍니다.

373
00:46:55,000 --> 00:47:01,000
그 수, 랭크 r은 해의 정확한 항목을 제외한 모든 정보를 알려줍니다.

374
00:47:01,000 --> 00:47:11,000
그것을 위해서는 행렬로 가야 합니다. 좋습니다. 좋은 주말 보내시고, 월요일에 뵙겠습니다.

