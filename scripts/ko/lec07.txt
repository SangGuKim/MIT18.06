
0:00  
0:09  
좋아요, 이번은 선형대수학(Linear Algebra) 강의 7입니다. 지금까지 벡터 공간(Vector Space)에 대해 이야기해왔고,  
0:19  
특히 행렬의 영공간(Null Space)과 열공간(Column Space)에 대해 말했죠.  
0:26  
그 공간들에 무엇이 있는지. 이제 그 공간들을 실제로 어떻게 설명하는지 이야기하고 싶어요.  
0:32  
그 공간에 있는 모든 벡터들을 어떻게 설명할까요? 이런 것들을 어떻게 계산할까요?  
0:39  
이제는 아이디어나 정의를 알고리즘으로 바꾸는 단계입니다.  
0:46  
Ax = 0을 푸는 알고리즘은 무엇인가요?  
0:53  
바로 그 영공간이 제가 관심 있는 대상이에요. 그럼 이제 특정한 행렬 A를 가지고,  
1:01  
자연스러운 알고리즘을 설명해 볼게요. 이 행렬을 가지고 직접 수행해 보죠.  
1:06  
자, 시작해봅시다. 예제로 사용할 행렬을 정해볼게요.  
(직사각형 행렬 예제)  
1:12  
이번 장에서는 직사각형(rectangular) 행렬을 다루게 됩니다. 그래서 열이 4개인 행렬을 만들어 볼게요.  
1:22  
그리고 행은 3개로 할게요. 두 번째 줄에는 2, 4, 6, 8 이고, 세 번째 줄에는 3, 6, 8, 10입니다.  
1:29  
좋아요.  
1:36  
이제 그 열들과 행들을 살펴보면요,  
(소거법 Elimination)  
1:42  
바로 눈에 띄는 건, 두 번째 열이 첫 번째 열의 배수라는 점이에요.  
1:47  
같은 방향이고 독립적이지 않죠. 이건 알고리즘 과정에서 발견하게 될 거예요.  
1:56  
행을 보면, 첫 번째 행과 두 번째 행을 더하면 세 번째 행이 나와요.  
2:03  
그러니까 세 번째 행은 독립적이지 않다는 뜻이죠. 이 모든 건 소거법 과정에서 드러납니다.  
2:12  
그래서 이제 제가 하려는 알고리즘은 소거법인데,  
2:19  
이제는 직사각형 행렬에도 적용되도록 확장한 버전이에요. 피벗(pivot) 위치에 0이 있더라도  
2:30  
계속 진행해 나가야 합니다. 좋아요, 그럼 해당 행렬에 대해 소거법을 실제로 해볼게요.  
2:36  
소거법을 수행하는 동안 항상 중요한 점은 —  
2:42  
영공간을 바꾸지 않는다는 것입니다. 정말 중요하죠? 저는 Ax = 0을 소거법으로 푸는 중이고,  
2:50  
여러분이 이미 알고 있는 연산들, 즉 한 방정식에서 다른 방정식의 배수를 빼는 연산을 할 때는  
2:56  
해는 변하지 않아요.  
3:02  
그래서 영공간도 변하지 않아요. 반면, 열공간은 바뀌게 됩니다. 이 점은 나중에 다시 강조할게요.  
3:08  
그러니까 소거법이 무엇을 그대로 남겨두는지를 주의 깊게 봐야 해요. 정답은 시스템의 해는 변하지 않는다는 거예요.  
3:18  
왜냐하면, 저는 정당한 연산을 방정식에 수행하고 있기 때문이죠.  
3:24  
물론, 오른쪽은 항상 0이니까, 제가 따로 0을 계속 쓰지는 않을 거예요.  
3:30  
그래서 저는 왼쪽 항만 다루고 있고, 오른쪽은 항상 0으로 유지된다고 생각하시면 돼요.  
3:39  
좋아요, 그럼 소거법이 뭔가요? 첫 번째 피벗이 어디 있는지는 알고 있죠?  
3:44  
그럼 그 다음에 무엇을 해야 할지도 알 겁니다. 자, 첫 번째 아래 행에 대해 첫 단계 수행해 볼까요?  
3:51  
첫 번째 피벗이 있는 행은 그대로 두고, 그 행의 2배를 이 행에서 빼면  
4:00  
0, 0이 됩니다. 문제가 있다는 신호죠. 6에서 2의 두 배를 빼면 2가 남고,  
4:07  
8에서 2의 두 배를 빼면 4가 남아요. 이제 세 번째 행에선  
4:13  
0, 0이 또 나오고, 8에서 3 * 2를 빼면 2, 10에서 3 * 2를 빼면 4가 됩니다. 좋아요.  
4:20  
이게 첫 번째 소거 단계예요. 첫 번째 열은 이제 정리됐죠. 다음 열로 넘어갈게요.  
4:26  
이제 두 번째 열입니다.  
4:35  
그 위치를 보면 0이네요. 그 아래도 보면 0이에요. 행 교환을 하고 싶지만,  
4:43  
아래도 0이에요. 이건 그 열이 이전 열들의 선형결합이라는 걸 알려주는 신호죠.  
4:53  
사실 그 두 번째 열은 앞선 열들의 조합이에요. 하지만 지금은 깊이 생각하지 않고 넘어갈게요.  
5:09  
그 열에선 할 일이 없어요. 다음 열로 넘어갑니다. 여기 다음 피벗이 있어요.  
5:15  
첫 번째 피벗이 여기에 있었고, 두 번째 피벗은 여기에 있죠. 계속해서 소거 과정을 진행합니다.  
5:22  
다음 단계에선 첫 번째 행은 그대로 두고,  
5:30  
두 번째 행도 그대로 두고, 이제 피벗이 있는 두 행을 유지하면서  
5:40  
그 아래 행을 제거하는 소거 연산을 하게 됩니다. 이번엔 곱해지는 수가 1이에요.  
5:47  
두 번째 행을 세 번째 행에서 빼면 0으로 이루어진 행이 나옵니다.  
5:53  
좋아요. 이걸 저는 행렬 U라고 부를게요.  
5:59  
U는 상삼각행렬(Upper Triangular)이라기보단,  
6:05  
상... 뭐랄까, 상위 구조라고 해두죠.  
6:12  
이건 이른바 계단형 형태(echelon form)라고 합니다. "계단형"이라는 말은 말 그대로 계단 모양의 형태를 말해요.  
6:21  
0이 아닌 값들이 계단처럼 배열되어 있는 구조죠. 만약 피벗이 하나 더 있었다면  
6:30  
계단은 더 이어졌을 거예요. 하지만 여기서는 피벗이 두 개뿐이네요.  
6:37  
좋아요. 그러면 지금까지 이 행렬에 대해 가장 중요한 숫자를 알아냈습니다.  
6:44  
피벗의 개수는 2입니다. 이 숫자를 행렬의 랭크(Rank)라고 부릅니다.  
(랭크 Rank)  
6:51  
바로 적을게요. A의 랭크란,  
6:58  
이 알고리즘에서 "랭크"라는 단어가 의미하는 바는  
7:04  
피벗의 개수입니다. 여기선 두 개죠.  
7:12  
좋아요. 저에게는 이 숫자 2가 아주 중요한 숫자예요. 자, 다시 돌아가 볼게요. 저는 항상 Ax = 0을 푸는 중이었지만  
7:22  
이제는 Ux = 0을 풀 수 있겠죠? 같은 해, 같은 영공간입니다.  
(해 Solution)  
7:29  
좋아요. 여기서 멈춰서 역대입(Back Substitution)을 해볼게요.  
7:36  
이제 질문을 해야 해요. 해를 어떻게 표현하죠?  
7:42  
Ax = 0의 해가 있긴 있어요. 식이 3개고, 미지수는 4개니까  
7:50  
해가 있을 거라고 예상했죠. 이제 그 해가 무엇인지 보겠습니다.  
7:55  
여기서 중요한 단계가 나옵니다. 위에서 언급한 대로,  
8:04  
피벗 변수(pivot variable)와 피벗 열(pivot column)을 분리해줍니다. 바로 이 두 개가 피벗 열이죠.  
8:09  
여기 두 개의 피벗 열이 있어요. 그 열들에는 피벗이 있어요.  
8:15  
그래서 피벗 열이 두 개입니다.  
8:22  
그리고 나머지 열들은 자유(free)라고 부를게요.  
8:27  
이 열들은 자유 열(free column)입니다.  
8:32  
왜 그런 단어를 쓰느냐고요? 왜 "자유"라는 말을 쓰느냐면,  
8:38  
이제 Ux = 0의 해를 구하려고 하는데요,  
8:43  
자유 열에 해당하는 변수들인 x2와 x4에는 어떤 값을 넣어도 된다는 뜻이에요.  
8:58  
x2와 x4는 어떤 수든 자유롭게 지정할 수 있어요.  
9:03  
그러고 나서 나머지 변수 x1과 x3의 값을 식을 이용해 구하는 거예요.  
9:10  
다시 한번 설명해볼게요. 어떤 x를 하나 정해보자면, 예를 들어  
9:29  
x2에 1을, x4에 0을 넣어볼 수 있겠죠. 이건 자유로운 선택이에요.  
9:35  
하지만 계산하기에 좋은 선택입니다. 좋아요. 이제 Ux = 0을 풀어  
9:41  
x1과 x3의 값을 구해보죠.  
9:47  
Ux = 0이 의미하는 식을 기억해볼까요?  
9:53  
첫 번째 식은 x1 + ...  
10:00  
지금 저는 이 행렬이 의미하는 바를 설명하고 있어요. 첫 번째 식은 이렇고,  
10:07  
두 번째 식은 2x3 + 4x4 = 0입니다.  
10:14  
이 두 개의 식이 있어요. 이젠 역대입으로 x1과 x3을 구할 수 있죠.  
10:24  
우리가 이미 알고 있는 방식에 기반해서 하는 거예요. 새로운 점은 자유 변수들이 있어서  
10:31  
그 값은 마음대로 정할 수 있다는 겁니다. 지금처럼 선택을 하나 했어요. 이제  
10:38  
x3은 얼마일까요? 1과 0을 넣었으니, 거꾸로 올라가 보면 마지막 식에서  
10:45  
x3은 0이 되겠네요.  
10:50  
왜냐하면 x4를 0으로 정했으니까요.  
10:55  
그래서 x3은 0입니다. x2를 1로 정했으니, x1은 얼마일까요?  
11:03  
마이너스 2죠. x1 + 2 = 0이니까 x1은 -2입니다.  
11:10  
잘 계산됐네요. 이건 Ax = 0의 해입니다.  
11:17  
그런데 이 해가 어떤 의미일까요? 이건 단순히 첫 번째 열의 -2배  
11:24  
더하기 두 번째 열의 1배가 0 벡터가 된다는 뜻입니다. 물론 맞는 말이죠.  
11:29  
그 열의 -2배 더하기 이 열의 1배는, 혹은 이 열의 -2배 더하기 저 열의 1배는  
11:35  
정확히 우리가 처음에 본 사실, 즉 두 번째 열이 첫 번째 열의 두 배라는 걸 나타내는 해예요.
11:43  
좋아요, 이제 영공간(null space)에 있는 벡터들을 더 말해보죠. 하나는 이미 찾았어요.  
11:51  
그 하나로부터 바로 더 많은 벡터들을 어떻게 구할 수 있을까요?  
11:58  
그냥 그 벡터의 배수를 취하면 됩니다. 아무 배수나 곱해도 괜찮아요.  
12:04  
예를 들어 어떤 상수 C를 곱한다면, X는 그 벡터의 아무 배수나 될 수 있어요.  
12:10  
그러니까 X는 이 벡터의 모든 배수일 수 있는 거죠. 그러면 그건 선을 나타냅니다.  
12:17  
4차원 공간 내에서 무한히 긴 선이죠.  
12:23  
이 선은 영공간 안에 있습니다. 그런데 이게 전체 영공간일까요?  
12:29  
아니죠. 여기에는 자유 변수(free variable)가 두 개 있습니다. 아까는 1과 0이라는 선택을 했지만,  
12:37  
다른 선택도 할 수 있었어요. 이번에는 0과 1을 선택해봅시다.  
12:44  
이게 제가 말한 시스템이에요. 이 알고리즘을 다시 반복하자면,  
12:54  
먼저 소거법(elimination)을 합니다.  
12:59  
그 다음 피벗 열(pivot column)과 자유 열(free column)을 구분합니다. 이걸 통해 변수 1과 3이 피벗 변수라는 걸 알 수 있고,  
13:05  
변수 2와 4는 자유 변수입니다. 이 자유 변수들에는,  
13:14  
하나는 1, 다른 하나는 0 같은 값을 줄 수 있죠. 아까는 1과 0을 줬고,  
13:22  
이번에는 반대로 0과 1을 줄 수 있어요.  
13:28  
자, 이제 그에 맞춰 해를 완성해봅시다. 영공간 안에 있는 새로운 벡터를 찾는 거예요.  
13:35  
이번 벡터는 아까와는 분명히 다릅니다. 왜냐하면 앞의 벡터에 어떤 배수를 곱해도  
13:42  
이번에 얻는 결과와는 같아질 수 없기 때문이죠. 즉, 새로운 벡터가 생겼습니다. 계속 이어서 계산해볼게요.  
13:47  
이번에 x3은 얼마인가요? 방정식을 보고 역대입(back substitution)해봅니다.  
13:53  
이번에는 x4를 1로, x2를 0으로 설정했으니  
13:59  
x3은 -2가 됩니다.  
14:06  
이제 첫 번째 식에서는 x1이 얼마가 될까요? 확인해보면,  
14:12  
2x3 = -4이고, +2가 더해지면 x1은 2가 되겠네요.  
14:19  
맞죠, x1 = 2. 그러면 이 벡터도 영공간에 속하게 됩니다.  
14:25  
그렇다면 이건 열들에 대해 무엇을 말해주는 걸까요?  
14:32  
이건 두 배의 첫 번째 열에서 두 배의 세 번째 열을 빼고, 네 번째 열을 더하면 0이 된다는 뜻이에요.  
14:37  
맞아요. 두 배의 첫 번째 열 - 두 배의 세 번째 열 + 네 번째 열 = 0 벡터.  
14:46  
이제 새로운 벡터를 영공간에서 찾은 거예요.  
14:52  
이제 전체 영공간을 설명할 준비가 됐어요. Ax = 0의 모든 해는 무엇일까요?  
15:00  
우리는 첫 번째 벡터를 찾았고, 그걸 갖고 있다면  
(특별한 해 Special Solutions)  
15:05  
그와 함께 어떤 벡터들이 영공간에 속할까요? 이 둘은 제가 ‘특별한 해(Special Solutions)’라고 부른 겁니다.  
15:13  
그건 그냥 제가 붙인 이름이에요. "특별한" 이유는 자유 변수에 특별한 값들 — 0과 1 — 을  
15:21  
줬기 때문이에요.  
15:27  
사실 자유 변수엔 어떤 값을 줘도 되지만,  
15:32  
이렇게 0과 1을 주면 모든 해를 얻을 수 있음을 확신할 수 있어요.  
15:40  
좋아요. 첫 번째 벡터가 있으면, 그 벡터의 모든 배수는 다 영공간에 속하겠죠.  
15:45  
그러니까 그 배수는 다 포함됩니다.  
15:50  
그리고 이제 또 무엇이 가능하냐면 — 여기에 공간을 남겨둔 이유가 있어요 —  
15:58  
그건 바로 덧셈(+) 기호입니다.  
16:04  
이 두 특별한 해의 선형결합(linear combination)을 모두 취할 수 있어요.  
16:09  
영공간에 있다고 말하는 편이 좋을까요, 아니면 그냥 Ax=0을 푼다고 할까요?  
16:15  
사실 우리는 Ux=0을 푸는 중이기도 하죠. 어쨌든, 중요한 덧셈 기호를 넣어야 해요.  
16:23  
두 개의 특별한 해를 모두 조합해서  
16:29  
그 선형결합을 만들면 됩니다. 그게 바로 결론이에요.  
16:37  
영공간은 이 두 특별한 해의 조합으로 정확히 표현됩니다.  
16:46  
그럼 특별한 해는 몇 개일까요? 자유 변수마다 하나씩입니다.  
16:51  
그리고 자유 변수는 몇 개였나요?  
16:59  
랭크(Rank)가 2였다면, 피벗 변수는 2개라는 뜻이고,  
17:05  
자유 변수는 몇 개죠?  
17:11  
4개의 변수 중에서 피벗 변수 r개가 있으면, 남는 자유 변수는 n-r입니다.  
17:20  
이 경우는 4 - 2 = 2개죠. 이렇게 딱 떨어지는 답이 나오는 걸 보세요.  
17:53  
피벗 변수는 r개고 — 즉, 사실상 독립적인 식은 r개라는 뜻이에요.  
17:59  
겉으로는 식이 3개처럼 보여도, 독립적인 건 2개뿐이었죠.  
18:05  
그리고 n-r개의 자유 변수는 자유롭게 정할 수 있었고,  
18:11  
그 값으로 0과 1을 줘서 특별한 해를 구했습니다.  
18:19  
좋아요. 여기서 멈춰도 되겠네요.  
18:25  
지금까지가 Ax = 0의 모든 해를 구하는 완전한 알고리즘이에요.  
18:34  
좋아요. 다시 정리하면, 먼저 소거법을 수행합니다.  
18:41  
어떤 열에서 할 게 없다면 그냥 계속 진행하면 됩니다.  
18:50  
피벗 개수 r이 중요하고, 거기서 n-r개의 자유 변수가 생깁니다. 이들에 0, 1 값을 주면 돼요.  
19:01  
자, 한 단계 더 나아가 보고 싶어요.  
19:08  
이 행렬을 더 정리하고 싶습니다. 현재는  
19:14  
계단형(echelon form), 혹은 상삼각형 형태로 되어 있어요.  
19:20  
한 단계 더 정리해서 더 좋은 형태로 만들고 싶어요.  
(행렬 R)  
19:25  
이제 "감소된 계단형 형태(reduced row echelon form)"라는 걸 얘기할게요.  
19:31  
행렬 R이라고 부를게요. 이게 바로 감소된 계단형 형태입니다.  
19:44  
이게 뭘 의미하냐면, 지금의 행렬 U를 더 정리할 수 있다는 거예요.  
19:52  
U까지 만든 건 괜찮아요.  
19:58  
20:08  
여기서 0으로만 된 행이 생긴 걸 보세요. 그걸 언급하지 않았지만 이제 언급할게요.  
20:15  
그 행은 세 번째 행이었고,  
20:20  
사실은 첫 번째와 두 번째 행의 선형결합이었어요. 소거법은 그걸 알아냈던 거죠.  
20:27  
0으로 된 행이 생긴다는 건,  
20:32  
원래 있던 행이 다른 행들의 조합이었다는 걸 말해줍니다.  
20:38  
소거법이 그 행을 제거해줬죠. 좋아요, 여기까지 왔습니다.  
20:44  
이제 그걸 더 정리해볼게요. 위로 올라가는 소거법도 할 수 있어요.  
20:51  
피벗 위쪽을 0으로 만들 수 있죠.  
20:58  
그래서 감소된 계단형 형태는 피벗 위아래가 모두 0이 됩니다.  
21:05  
자, 그걸 해봅시다.  
21:11  
이제 두 번째 행을 첫 번째 행에서 빼면, 첫 번째 행에 0과 -2가 남아요.  
21:20  
좋습니다.  
21:26  
한 단계 더 정리해볼게요. 피벗 값을 1로 만들 수 있어요.  
21:33  
예를 들어 두 번째 방정식을 피벗 값으로 나누면 됩니다.  
21:41  
해에는 아무 영향도 없어요. 그럼 그렇게 해보죠. 그러면 정말 끝이 납니다.  
21:46  
결과는 1, 2, 0, -2 / 0, 0, 1, 2  
21:53  
두 번째 식을 2로 나눠서 피벗을 1로 만들었고, 아래는 0이죠.  
22:05  
좋아요. 이게 바로 행렬 R입니다.  
22:14  
이제 여러분이 전체 알고리즘을 실행할 수 있을 거라 기대해요.  
22:21  
Matlab에서는 이 과정을 바로 할 수 있어요. 명령어는 —  
22:27  
"reduced row echelon form of A" 입니다.  
22:34  
즉, A를 입력하고 그 명령어를 치면  
22:43  
이 행렬이 나올 거예요. 바로 감소된 계단형 형태입니다.  
22:49  
그리고 이 행렬은 모든 정보를 명확히 담고 있어요.  
23:00  
어떤 정보가 있느냐고요? 바로 피벗 행은 1, 2이고,  
23:08  
피벗 열은 1, 3입니다. 사실상 단위 행렬이 이 안에 들어 있어요.  
23:15  
피벗 위아래가 모두 0이고, 피벗 값은 1이니까,  
23:22  
2×2 단위 행렬이 딱 들어 있는 거예요.
23:30  
피벗 행과 피벗 열에는 단위행렬(I)이 있습니다.  
23:42  
그 아래는 모두 0인 행들이에요.  
23:48  
이런 행들은 원래 행들이  
23:56  
다른 행들의 선형 결합이었음을 나타내죠. 그러니까 실제로는 두 개의 독립 행만 있었던 겁니다.  
24:02  
그리고 이제 — 단위행렬(I)이 있고, 또 자유 열(free columns)도 있습니다.  
24:10  
그리고 이들도 가능한 한 정리되어 있죠.  
24:17  
사실 이젠 너무 잘 정리되어 있어서, 특별한 해(special solutions)를 그냥 읽어낼 수 있어요 — 아까는  
24:26  
직접 계산하고, 역대입(back substitution)을 했었죠?  
24:32  
이번엔 아예 이 정리된 시스템을 사용해볼게요.  
24:39  
이 숫자들을 그대로 사용할 겁니다. 이 방정식에서 제가 뭘 했죠?  
24:45  
이 식을 2로 나눴고,  
24:52  
두 번째 행을 두 배 빼서 이 항을 0으로 만들고 부호를 바꿨죠.  
24:58  
결과적으로 Rx = 0이 됐습니다.  
25:04  
25:10  
이제 여기 있는 모든 사람들이 Ax = 0의 해,  
25:19  
중간 단계인 Ux = 0의 해, 그리고 마지막 단계인 Rx = 0의 해가 전부 같다는 걸 이해하셨으면 해요.  
25:27  
왜냐하면 그 사이에서 방정식을 망가뜨리는 연산은 하지 않았기 때문이에요.  
25:33  
단지 방정식을 곱하거나 다른 식에서 빼는 연산만 했을 뿐이죠.  
25:39  
좋아요. 이제 핵심은, 자유 변수를 설정하고  
25:47  
역대입을 할 때, 그냥 그 숫자들이 그대로 보여진다는 점이에요. 예를 들어  
26:01  
여기선 x2를 1, x4를 0으로 했었죠.  
26:07  
자, 좀 나눠서 정리해볼게요.  
26:12  
피벗 열에는 이런 값들이 보입니다. 그리고 자유 열에는 —  
26:21  
자유 열에는 어떤 값들이 보이냐면, x2에 해당하는 첫 번째 자유 열에는 2, 0  
26:29  
그리고 x4에 해당하는 네 번째 열에는 -2, 2가 들어 있어요.  
26:36  
그리고 마지막에는 0으로 이루어진 행이 있고, 그건 그냥 0 = 0이라 만족되죠.  
26:41  
그 식은 자동으로 만족됩니다. 여기서 중요한 건 —  
26:48  
역대입을 하면 이 숫자들이 정확히 나타난다는 거예요.  
26:55  
부호는 바뀌죠. 제가 말하고자 했던 건 2, -2, 0, 2가 나타난다는 거예요.  
27:01  
이 부분이 바로 자유 행렬 부분입니다.  
27:07  
여기가 단위행렬 부분이고, 여기는 자유 부분이에요. 이름을 F라고 할게요.  
27:14  
물론 여기는 I죠, 단위행렬이니까요. 자유 부분은 — 그냥 역대입을 하고 있는 거예요.  
27:25  
그리고 이 자유 부분의 숫자들은 부호가 바뀌어서  
27:32  
방정식의 다른 쪽에 나타나게 됩니다. 그래서 -2, 0 / 2, -2가 나왔던 거죠.  
27:39  
이건 우연이 아니었어요. 그렇게 될 수밖에 없었어요. 왜 그런지 명확하게 보여드릴게요.  
27:48  
좋아요, 이게 제가 관심 있는 부분입니다.  
27:53  
이제 이걸 직접 해보죠.  
27:59  
이제 시스템이  
28:04  
이미 rref (reduced row echelon form) 형태로 되어 있다고 가정해봅시다.  
28:11  
행렬 R이 어떤 모습일까요?  
28:25  
피벗 열이 앞쪽에 오고  
28:30  
그 다음 자유 열이 있는 순서라고 해보죠. 아래쪽엔 0으로 된 행이 있을 수도 있어요.  
28:37  
이게 전형적인 감소된 계단형 형태입니다.  
28:45  
전형적인 구조예요.  
28:51  
r x r 형태의 단위행렬이 있고,  
28:57  
r개의 피벗 행이 있습니다.  
29:06  
그리고 n-r개의 자유 열이 있죠.  
29:16  
좋아요. 그럼 특별한 해는 무엇일까요?  
29:21  
x는 어떤 벡터가 되어야 할까요? Rx = 0을 풀고자 한다면 —  
29:27  
사실 이제는 전체를 한번에 해보겠습니다.  
29:36  
이제는 블록 행렬로 되어 있으니, 특별한 해 전체를 한 번에 구할 수 있어요.  
29:41  
R x = 0을 풀어야 하고, 특별한 해를 얻게 될 겁니다.  
29:49  
실제로 — 한꺼번에 할 수 있겠죠.  
29:54  
영공간 행렬(null space matrix)을 만들 겁니다.  
30:00  
행렬 N입니다. 이 행렬의 열들은  
30:13  
특별한 해들이 됩니다.  
30:19  
이게 어렵게 들릴지 모르지만, 전혀 어렵지 않아요. 이 행렬 N은  
30:25  
Rx = 0이 되도록 하는 행렬입니다.  
30:31  
즉, N의 각 열을 R에 곱했을 때 0이 되어야 해요.  
30:37  
어떤 N이 그런 역할을 할까요? 자유 변수 부분에는 단위행렬 I를 넣고,  
30:45  
피벗 변수 부분에는 -F를 넣습니다.  
30:54  
예제에서 했던 것처럼요. 거기서도 단위행렬과 F가 있었죠.  
31:02  
그 열들이 바로 특별한 해의 행렬이 됩니다. 실제로 Matlab에는  
31:09  
NULL이라는 명령어가 있어요. teaching code로도 가능하죠.  
31:19  
NULL of A — 이 명령어는  
31:24  
null basis, 즉 영공간 기저 행렬을 만들어 줍니다.  
31:30  
그럼 어떻게 작동하느냐? Matlab은 행렬 R을 계산하고,  
31:38  
피벗 변수와 자유 변수를 구분한 뒤,  
31:47  
자유 변수에는 1과 0을 넣고,  
피벗 변수는 역대입으로 계산해 넣습니다.  
31:54  
하지만 이 경우엔 역대입도 아주 간단하죠. 왜냐하면 지금 시스템은  
32:00  
Rx = 0 형태이기 때문이에요. R은 I와 F로 나눠지고,  
32:11  
x는 피벗 변수와 자유 변수로 나눠져 있고, 결과는 0이어야 해요.  
32:18  
즉, 피벗 변수 + F × 자유 변수 = 0입니다.  
32:24  
F × 자유 변수를 반대편으로 넘기면  
32:31  
피벗 변수 = -F × 자유 변수  
32:37  
바로 이게 가장 단순한 형태의 방정식이에요.  
32:43  
소거를 반복해서 최적 형태로 만들면,  
32:49  
결국 이 형태로 도달하게 됩니다.  
32:56  
이제 자유 변수를 단위행렬로 설정하면,  
33:02  
피벗 변수는 -F가 됩니다. 자, 예제를 하나 더 해볼까요?  
33:08  
예제 하나 더 해볼 수 있겠어요? 그럼 다른 행렬 하나 잡고, 이 알고리즘을 다시 진행해보죠.  
33:17  
자, 갑시다. 칠판에 새로운 행렬을 써보겠습니다.  
33:25  
행렬 이름은 다시 A라고 하죠. 그런데 이번엔 —  
33:31  
어느 정도 크기로 만들까요?  
33:36  
이걸 해볼게요. 재미삼아, 아까 행렬 A의 전치(transpose)를 취해서  
33:44  
어떻게 되는지 보죠. 2 4 6 8 그리고 3 6 8 10입니다.  
33:55  
계산하기 전에, 어떤 결과가 나올지 예측해보죠.  
34:06  
피벗 변수는 몇 개가 나올까요?  
34:12  
피벗 열은 몇 개일까요? 행렬에는 열이 3개 있지만,  
34:22  
3개의 피벗이 생길까요? 아니에요. 세 번째 열은 앞 두 열의 합이기 때문에  
34:31  
세 개의 피벗은 없을 거예요. 앞의 두 열은  
34:38  
서로 독립이니까 피벗 열이 되겠지만,  
34:45  
세 번째 열은 종속이므로 자유 열이 될 겁니다.  
34:52  
소거법이 이걸 정확히 찾아내야 해요. 소거법은  
34:58  
행도 정리할 겁니다. 종속적인 행과 독립적인 행을 나눠주죠.  
35:05  
그럼 이 행렬의 rref는 어떻게 될까요? 직접 해봅시다.  
35:11  
첫 번째 피벗은 여기 있어요. 두 번째 행에서 이걸 두 배 빼면 0행이 됩니다.  
35:20  
두 배 빼면 두 번째 행은 0 2 2가 되고, 세 번째 행은 0 4 4가 됩니다.  
35:28  
좋아요. 첫 번째 열은 이제 정리됐습니다.
35:35  
첫 번째 변수는 피벗 변수(pivot variable)입니다. 문제없죠. 두 번째 열로 넘어가 봅시다. 피벗을 보니 0이에요.  
35:43  
아래를 보니 2가 있네요. 좋아요, 행 교환(row exchange)을 합니다.  
35:50  
그래서 이제 0이 아래로 가고, 괜찮은 피벗이 위로 왔어요. 그걸 사용합니다.  
35:58  
좋아요. 그리고 두 번째 행의 두 배를 세 번째 행에서 빼줍니다. 이렇게 하면 되겠죠?  
36:05  
이제 행렬 U의 형태가 되었습니다. 이게 A였고, 이게 U예요. 이제 보이네요 —  
36:17  
멈춰야겠네요. 세 번째 열로 가야겠지만, 그냥 멈췄어요. 시도조차 안 하고 멈춘 건 잘못된 거였죠.  
36:22  
세 번째 열로 가봅시다. 피벗 위치를 보니 0이고,  
36:28  
그 아래도 전부 0이에요. 이제는 멈춰도 됩니다.  
36:35  
그래서 랭크(rank)는 다시 2입니다.  
36:45  
그렇다면 영공간(null space)은 어떨까요? 이번에는 특별한 해(special solutions)가 몇 개일까요?  
36:52  
이 행렬에 대해 특별한 해는 몇 개일까요? 자유 변수(free variable)와 피벗 변수는 어떤 건가요?  
(피벗 열 Pivot Columns)  
36:59  
피벗 열은 두 개입니다.  
37:04  
이건 우연이 아니에요. A와 A 전치행렬(A transpose)의 피벗 열 개수가 같다는 건  
37:11  
매우 중요한 사실입니다.  
37:19  
그리고 자유 열이 하나 있어요. 하나의 자유 열. 전체 열 개수 3에서 피벗 열 2개를 빼면  
37:30  
자유 열은 1개가 됩니다.  
37:37  
좋아요. 이제 영공간에는 무엇이 있을지 풀어보죠.  
37:47  
이 벡터들은 길이가 3입니다. 구성 요소가 3개뿐이에요.  
37:52  
x를 쓸 공간을 너무 넓게 잡았네요.  
37:58  
x는 구성 요소가 딱 3개입니다. 무엇일까요?  
38:03  
영공간을 찾고 있는 중입니다.  
38:09  
어떻게 시작하냐면, 자유 변수에 어떤 값을 편하게 지정합니다.  
38:17  
이번에는 자유 변수를 1로 지정하죠.  
38:23  
자유 변수를 0으로 지정하면 피벗 변수들이 전부 0이 되니까 의미가 없어요.  
38:28  
그러니까 자유 변수를 1로 설정합니다. 그러면 식이 어떻게 되냐면 —  
38:36  
이제 식은 x1 + 2x2 + 3x3 = 0  
38:45  
이게 첫 번째 식이고, 두 번째 식은 2x2 + 2x3 = 0입니다.  
38:51  
좋아요. x3을 1로 두면, x2는 -1이 됩니다.  
39:02  
그리고 x3이 1이고 x2가 -1이면, x1은  
39:07  
-1일 수도 있겠네요. 실제로 다시 확인해봅니다.  
39:14  
암산으로 대충 계산했지만,  
39:19  
확인해보죠. 이 해 x는 첫 번째 열을 -1배, 두 번째 열을 -1배, 세 번째 열을 +1배 해서  
(영공간 Null Space)  
39:28  
결과가 0이 되는 벡터입니다. 맞습니다. -첫 번째 -두 번째 +세 번째는 0이에요.  
39:35  
그래서 이건 영공간에 속합니다. 그리고 이제는  
39:40  
영공간에 어떤 것들이 더 포함되는지 알 수 있어요.  
39:46  
C를 곱하면 되죠. 전체 영공간은 하나의 선(line)입니다.  
39:51  
이게 그 설명이에요. 과제나 퀴즈 또는 기말고사에서  
39:57  
"이 행렬의 영공간을 구하시오"라고 나오면,  
40:04  
이런 방식으로 접근하시면 돼요. 이게 바로 제가 기대하는 답입니다.  
40:10  
그리고 C도 꼭 포함시켜 주세요. 그게 영공간 전체를 의미한다는 걸 기억하고 있다는 뜻이니까요.  
40:18  
나중에 영공간의 기저(basis)를 묻는 문제가 나오면, 그땐 이 벡터 하나만 주면 됩니다.  
40:23  
하지만 전체 영공간을 묻는다면, 이 벡터가 지나가는 직선 전체를 의미해야 해요.  
(자연스러운 해 Natural Solution)  
40:31  
좋아요. 이제 이 예제에서 자연스럽게 할 수 있는 일이 하나 더 있어요.  
40:43  
바로 감소된 행렬 R까지 나아가는 것입니다.  
40:49  
R까지 진행해 볼 수 있을까요? 금방 끝납니다. 연습 삼아 해봅시다.  
40:55  
좋아요. 여기서 해야 할 일은 피벗 위쪽을 0으로 만드는 거예요. 그 행을 위에서 빼면 1 0 1이 남아요.  
41:02  
이 행을 위에서 빼면, 피벗 위에 0이 생깁니다. 이제 피벗을 1로 만들어야 하겠죠.  
41:12  
R 행렬을 위해, 이 식을 2로 나눕니다.  
41:18  
그리고 나머지 0들은 그대로니까 그대로 유지됩니다.  
41:23  
이게 바로 R입니다. 보이시죠?  
41:28  
여기 위쪽에 단위행렬이 있어요. 여기 자유 부분 F도 보이죠?  
41:36  
그리고 아래에는 0들이 있습니다. 전체 구조는 I F / 0 0입니다.  
41:42  
x 벡터는 어떻게 생겼을까요? 자유 부분에는 단위행렬,  
41:48  
이번에는 그냥 숫자 하나지만, 어쨌든 자유 부분에는 단위행렬이 들어갑니다.  
41:56  
피벗 변수에는 무엇이 있을까요? 역대입 결과는  
42:03  
이 값들의 음수입니다. 보세요, 이건 어떤 벡터의 배수로 표현됩니다.  
42:11  
여기 단위행렬이 있고, 이 부분은 -F입니다.  
42:19  
이게 바로 이 경우에 대한 영공간 행렬(null space matrix) N입니다.  
42:24  
이 영공간 행렬 N은 특별한 해들을 열로 가지는 행렬이에요.  
42:30  
자유 변수에는 1, 피벗 변수에는 -F가 들어있죠.  
42:39  
그래서 보시다시피, -F는 특별한 해 속에 자동으로 나타납니다.  
42:45  
정말 그게 전부예요. Ax = 0에 대해  
42:51  
더 이상 말할 건 없네요. Ax = b에 대해서는  
42:59  
금요일에 다루겠습니다. 좋아요, 지금까지가 영공간에 대한 전체 내용입니다.  
43:05  
감사합니다.
